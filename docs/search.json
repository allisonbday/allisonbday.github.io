[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Projects",
    "section": "",
    "text": "Projects\n\n\n\n\n\n\n\n\n\n\nF1 Streamlit App\n\n\nCombining my love of F1 and data using Streamlit\n\n\n\npython\n\n\nstreamlit\n\n\n\nCombining my love of F1 and data using Streamlit\n\n\n\nAug 31, 2024\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nFair Isle Knitting Series\n\n\nA series on how to knit Fair Isle patterns using pixel art and python\n\n\n\nknitting\n\n\npixel-art\n\n\npython\n\n\n\nA series on how to knit Fair Isle patterns using pixel art and python\n\n\n\nMay 17, 2024\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nTemperature Blanket Generator\n\n\nA series about generating a temperature blanket pattern 🧶\n\n\n\nQuarto\n\n\nStreamlit\n\n\n\nA series about generating a temperature blanket pattern 🧶\n\n\n\nAug 28, 2023\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCustomizing Your Quarto Blog\n\n\nAdding some ✨ pizzazz ✨ to your Quarto blog\n\n\n\nQuarto\n\n\n\nA series covering how to customize your Quarto blog.\n\n\n\nMay 5, 2023\n\n\n\n\n\n\n\n\nNo matching items\n\n\n  \n\n\nAll Projects\n\n\nAll Posts\n\n\n   \n     \n     \n       Order By\n       Default\n         \n          Title\n        \n         \n          Date - Oldest\n        \n         \n          Date - Newest\n        \n     \n  \n    \n      \n      \n    \n\n\n\n\n  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n \n\n\n\n\n  \n\n\n\n\nRandom Column\n\n\n\n\n\n\n\nPython\n\n\nJupyter Notebooks\n\n\nCode Snippets\n\n\nPandas\n\n\n\n\n\n\n\n\n\n\n\nJan 15, 2025\n\n\n4 min\n\n\n\n\n\n\n  \n\n\n\n\nF1 API - Season Data\n\n\n\n\n\n\n\nPython\n\n\nJupyter Notebooks\n\n\nCode Snippets\n\n\nPandas\n\n\nAPIs\n\n\nJSON\n\n\n\n\n\n\n\n\n\n\n\nAug 31, 2024\n\n\n4 min\n\n\n\n\n\n\n  \n\n\n\n\nKnitting with Code: Designing Repeating Pixel Art for Fair Isle Patterns Using Matplotlib and Numpy\n\n\n\n\n\n\n\nPython\n\n\nCode Snippets\n\n\nPandas\n\n\n\n\nHarness the power of Python to create repeating pixel art for Fair Isle patterns using Matplotlib and Numpy.\n\n\n\n\n\n\nMay 17, 2024\n\n\n9 min\n\n\n\n\n\n\n  \n\n\n\n\nOpen Metro API\n\n\n\n\n\n\n\nPython\n\n\nPandas\n\n\nAPIs\n\n\n\n\n\n\n\n\n\n\n\nAug 30, 2023\n\n\n1 min\n\n\n—\n\n\nCustomizing Quarto Series\n\n\nPart 1\n\n\n\n\n\n\n  \n\n\n\n\nNotion API\n\n\nQuerying and Updating Databases with Python\n\n\n\n\nPython\n\n\nAPIs\n\n\nNotion\n\n\n\n\nLearn how to connect to the Notion API, query and update databases with Python.\n\n\n\n\n\n\nMay 29, 2023\n\n\n43 min\n\n\n\n\n\n\n  \n\n\n\n\nMaking a Series\n\n\n\n\n\n\n\nQuarto\n\n\n\n\nHow to completely redo your Quarto Posts directory to enable series! (Inspired by this post by Albert Rapp)\n\n\n\n\n\n\nMay 5, 2023\n\n\n5 min\n\n\n—\n\n\nCustomizing Quarto Series\n\n\nPart 2\n\n\n\n\n\n\n  \n\n\n\n\nMake your About page about YOU\n\n\nThere are lots of ways to customize your Quarto About page. Here’s how I did it!\n\n\n\n\nQuarto\n\n\n\n\nCustomizing the Quarto About page with text, embeds, and more!\n\n\n\n\n\n\nMay 4, 2023\n\n\n3 min\n\n\n—\n\n\nCustomizing Quarto Series\n\n\nPart 1\n\n\n\n\n\n\n  \n\n\n\n\nVS Code Extensions Everyone Should Have\n\n\n\n\n\n\n\nVS Code\n\n\n\n\nVS Extensions that I need to survive\n\n\n\n\n\n\nMay 2, 2023\n\n\n8 min\n\n\n\n\n\n\n  \n\n\n\n\nPandas Groupby & Aggregations\n\n\n\n\n\n\n\nPython\n\n\nPandas\n\n\nCode Snippets\n\n\n\n\n\n\n\n\n\n\n\nMar 4, 2023\n\n\n6 min\n\n\n\n\n\n\n  \n\n\n\n\nANSI Colored Text in Terminal/Outputs\n\n\n\n\n\n\n\nPython\n\n\nJupyter Notebooks\n\n\nCode Snippets\n\n\n\n\nCredit goes to this StackOverflow thread\n\n\n\n\n\n\nFeb 28, 2023\n\n\n2 min\n\n\n\n\n\n\n  \n\n\n\n\nWorking with Nested JSONs\n\n\n\n\n\n\n\nAPIs\n\n\nJSON\n\n\n\n\n\n\n\n\n\n\n\nNov 6, 2022\n\n\n3 min\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "jobs/doterra.html",
    "href": "jobs/doterra.html",
    "title": "Allison Day",
    "section": "",
    "text": "SELECT u.user_id, SUM(o.amt) AS total\nFROM user u\nLEFT JOIN order_header o ON u.user_id = o.user_id\nGROUP BY user_id;\nReturns a table that looks like this: | user_id | total | |———|——–| | 1 | 52 | | 2 | 169 | | 3 | null |\nThe users who haven’t spent money will have a null in the total column. It would be interesting to sort desc or filter to only orders of that week, or maybe to market to find which is the most productive. Pretty basic but opens the door to interesting insights.\n\n\n\nSELECT u.*\nFROM user u\nWHERE NOT EXISTS (SELECT 1 FROM order_header o WHERE o.user_id = u.user_id);\nreturns a table that looks like this: | user_id | name | market | |———|———|——–| | 3 | Ruby | North |\nI chose WHERE NOT EXISTS over WHERE o.user_ID IS NULL because I think exists future proofs the query more since we are joining tables and may want to add more constraints in the future.\n\n\n\nCREATE INDEX idx_market\nON user (market);\n\nCREATE INDEX idx_order_date\nON order_header (order_date);\nIf I had millions of rows, I would want to make an index of the different markets so that I can easily filter by a specific market.\nMy logic for the order table falls along those same lines. When I’m working with time data I often filter by date and creating an index would speed up the WHERE statement.\n\n\n\n\nThis is a snippet of code from my internship that I’m particularly proud of. I had to go through a dataset of points, get the overlapping ones and then rank as they rose (lowest was 1, highest was n). But if a height was missing then it needed to skip that height (start at 2). Speed was the most important factor. This code needed to comb through over thousands of points every few seconds.\n# python using pandas\ncenters[\"position\"] = centers.groupby([\"x\", \"y\"]).ngroup()\ncenters[\"heightlist\"] = centers.groupby(\"position\")[\"z\"].transform(\"count\")\navg_level = ceil(centers[\"heightlist\"].mean())\n\nfor position in centers[\"position\"].unique():\n    pos = centers.loc[(centers[\"position\"] == position)]\n    pos.sort_values(by=[\"z\"], ascending=True, inplace=True)\n\n    if pos[\"heightlist\"].min() < avg_level:\n        high = avg_level\n    else:\n        high = pos[\"heightlist\"].min()\n\n    levels = []\n    for i in range(len(pos)):\n        levels.append(high - i)\n\n    centers.loc[(centers[\"position\"] == position), \"level\"] = levels\nLine 1 centers[\"position\"] = centers.groupby([\"x\", \"y\"]).ngroup() Creates a new column named [position] and has a unique id for each unique (x,y). This is very helpful to help us filter each position later.\nLine 2 centers[\"heightlist\"] = centers.groupby(\"position\")[\"z\"].transform(\"count\") Groups by position, and counts the number of unique z values are in that position.\nLine 3 avg_level = ceil(centers[\"heightlist\"].mean()) The average heightlist for the whole dataset\nLine 4 for position in centers[\"position\"].unique(): This line ittorated through the centers.csv to find each unique position (x,y) for filtering.\nLine 5 pos = centers.loc[(centers[\"position\"] == position)] Creates a filtered dataset named pos containing only those with the same position as the loop.\nLine 6 pos.sort_values(by=[\"z\"], ascending=True, inplace=True) Sorts all of the values by their z in ascending order so that when we rank it will be from lowest to highest (1, …, n). Decided to do it inplace so that we don’t have to redefine pos again, and because we’re not losing any data.\nLines 7-10\nif pos[\"heightlist\"].min() < avg_level:\n    high = avg_level\nelse:\n    high = pos[\"heightlist\"].min()\nEven though pos should have the same heightlist for every position (since it was generated using position), I decided to use the .min() aggrigation anyway because we’re checking if it’s above the average_level. If it is above or equal to average level then it will just use the number of heights. However, if it is below average then it is missing heights and needs to start at a different number, which will be calculated from the average (so high = average).\nLines 11-13\nlevels = []\nfor i in range(len(pos)):\n    levels.append(high - i)\nlevels is a list of all of the heights. As the loop ittorates, i will become bigger and as we append make levels count down. Usually high matches the count of rows, so levels counts down to one [5, ..., 1]. However, if it was determined to not have enough levels it will only count down from average [5, ..., 2].\nLine 14 centers.loc[(centers[\"position\"] == position), \"level\"] = levels This maps the correct height to the centers.csv using the levels list using .loc. It filters down to all the rows with the same position, then defines the column [level] to match the list levels. The filtered centers.csv and the levels list must be the same length or else there will be errors, but because we calculated the levels list using the length of the filtered dataframe they should always match."
  },
  {
    "objectID": "posts/nested_jsons/Nested_JSONs.html",
    "href": "posts/nested_jsons/Nested_JSONs.html",
    "title": "Working with Nested JSONs",
    "section": "",
    "text": "Imports\n# this is code-fold\nimport pandas as pd\nimport json\n\njson_raw = \"code/json_example.json\"\nwith open(json_raw) as json_data:\n    json_example = json.load(json_data)\n\n\nLets say pulled an API and it gave you this json:\n{\n    \"Total\": 1,\n    \"Page\": 1,\n    \"Products\": [\n        {\n            \"ID\": 12345,\n            \"SKU\": \"Clownfish\",\n            \"Name\": \"Nemo\",\n            \"Suppliers\": [\n                {\n                    \"SupplierID\": \"67891\",\n                    \"SupplierName\": \"Little Fish Inc\",\n                    \"Cost\": 5.99\n                },\n                {\n                    \"SupplierID\": \"24601\",\n                    \"SupplierName\": \"Large Pond Co\",\n                    \"Cost\": 5.59\n                }\n            ],\n            \"PriceTiers\": {\n                \"Public Retail Price\": 24.99,\n                \"Employee Price\": 6.0\n            }\n        }\n    ]\n}\n\nBasic\n\ndf = pd.json_normalize(\n    json_example, \n    record_path=[\"Products\"],\n    errors=\"ignore\",\n    )\n\nprint(df.to_markdown())\n\n|    |    ID | SKU       | Name   | Suppliers                                                                                                                                          |   PriceTiers.Public Retail Price |   PriceTiers.Employee Price |\n|---:|------:|:----------|:-------|:---------------------------------------------------------------------------------------------------------------------------------------------------|---------------------------------:|----------------------------:|\n|  0 | 12345 | Clownfish | Nemo   | [{'SupplierID': '67891', 'SupplierName': 'Little Fish Inc', 'Cost': 5.99}, {'SupplierID': '24601', 'SupplierName': 'Large Pond Co', 'Cost': 5.59}] |                            24.99 |                           6 |\n\n\n\n\nBy Suppliers\n\ndf = pd.json_normalize(\n    json_example,\n    record_path=[\"Products\", \"Suppliers\"],\n    meta=[\n        [\"Products\"],\n    ],\n    errors=\"ignore\",\n)\n\nprint(df.to_markdown())\n\n|    |   SupplierID | SupplierName    |   Cost | Products                                                                                                                                                                                                                                                                                |\n|---:|-------------:|:----------------|-------:|:----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n|  0 |        67891 | Little Fish Inc |   5.99 | {'ID': 12345, 'SKU': 'Clownfish', 'Name': 'Nemo', 'Suppliers': [{'SupplierID': '67891', 'SupplierName': 'Little Fish Inc', 'Cost': 5.99}, {'SupplierID': '24601', 'SupplierName': 'Large Pond Co', 'Cost': 5.59}], 'PriceTiers': {'Public Retail Price': 24.99, 'Employee Price': 6.0}} |\n|  1 |        24601 | Large Pond Co   |   5.59 | {'ID': 12345, 'SKU': 'Clownfish', 'Name': 'Nemo', 'Suppliers': [{'SupplierID': '67891', 'SupplierName': 'Little Fish Inc', 'Cost': 5.99}, {'SupplierID': '24601', 'SupplierName': 'Large Pond Co', 'Cost': 5.59}], 'PriceTiers': {'Public Retail Price': 24.99, 'Employee Price': 6.0}} |\n\n\n\n\nGet Product Columns\n\ndf = pd.json_normalize(\n    json_example,\n    record_path=[\"Products\", \"Suppliers\"],\n    meta=[\n        [\"Products\", \"ID\"],\n        [\"Products\", \"SKU\"],\n        [\"Products\", \"Name\"],\n        [\"Products\", \"PriceTiers\"], \n    ],\n    errors=\"ignore\",\n)\n\nprint(df.to_markdown())\n\n|    |   SupplierID | SupplierName    |   Cost |   Products.ID | Products.SKU   | Products.Name   | Products.PriceTiers                                   |\n|---:|-------------:|:----------------|-------:|--------------:|:---------------|:----------------|:------------------------------------------------------|\n|  0 |        67891 | Little Fish Inc |   5.99 |         12345 | Clownfish      | Nemo            | {'Public Retail Price': 24.99, 'Employee Price': 6.0} |\n|  1 |        24601 | Large Pond Co   |   5.59 |         12345 | Clownfish      | Nemo            | {'Public Retail Price': 24.99, 'Employee Price': 6.0} |\n\n\n\n\nInclude all of the sub dictionary columns too\n\ndf = pd.json_normalize(\n    json_example,\n    record_path=[\"Products\", \"Suppliers\"],\n    meta=[\n        [\"Products\", \"ID\"],\n        [\"Products\", \"SKU\"],\n        [\"Products\", \"Name\"],\n        [\"Products\", \"PriceTiers\", \"Public Retail Price\"], \n        [\"Products\", \"PriceTiers\", \"Employee Price\"]\n    ],\n    errors=\"ignore\",\n)\n\nprint(df.to_markdown())\n\n|    |   SupplierID | SupplierName    |   Cost |   Products.ID | Products.SKU   | Products.Name   |   Products.PriceTiers.Public Retail Price |   Products.PriceTiers.Employee Price |\n|---:|-------------:|:----------------|-------:|--------------:|:---------------|:----------------|------------------------------------------:|-------------------------------------:|\n|  0 |        67891 | Little Fish Inc |   5.99 |         12345 | Clownfish      | Nemo            |                                     24.99 |                                    6 |\n|  1 |        24601 | Large Pond Co   |   5.59 |         12345 | Clownfish      | Nemo            |                                     24.99 |                                    6 |"
  },
  {
    "objectID": "posts/colored_text/print_colored_text.html",
    "href": "posts/colored_text/print_colored_text.html",
    "title": "ANSI Colored Text in Terminal/Outputs",
    "section": "",
    "text": "needs to be inside the \"\" when printing\ncustomization starts with a \\033[ split by ; and ends with m\nprint statement ends with \\033[0m"
  },
  {
    "objectID": "posts/colored_text/print_colored_text.html#effects",
    "href": "posts/colored_text/print_colored_text.html#effects",
    "title": "ANSI Colored Text in Terminal/Outputs",
    "section": "Effects",
    "text": "Effects\n\nprint(f\"\\033[0m 0 = normal \\033[0m\")\nprint(f\"\\033[1m 1 = bold \\033[0m\")\nprint(f\"\\033[3m 3 = italic \\033[0m\")\nprint(f\"\\033[4m 4 = underline \\033[0m\")\nprint(f\"\\033[9m 9 = crossed-out \\033[0m\")"
  },
  {
    "objectID": "posts/colored_text/print_colored_text.html#text-color",
    "href": "posts/colored_text/print_colored_text.html#text-color",
    "title": "ANSI Colored Text in Terminal/Outputs",
    "section": "Text Color",
    "text": "Text Color\n\nprint(f\"\\033[0m 0 = normal \\033[0m\")\nprint(f\"\\033[30m 30 = white \\033[0m\")\nprint(f\"\\033[31m 31 = red \\033[0m\")\nprint(f\"\\033[32m 32 = green \\033[0m\")\nprint(f\"\\033[33m 33 = yellow \\033[0m\")\nprint(f\"\\033[34m 34 = blue \\033[0m\")\nprint(f\"\\033[35m 35 = pink \\033[0m\")\nprint(f\"\\033[36m 36 = teal \\033[0m\")\nprint(f\"\\033[37m 37 = gray \\033[0m\")"
  },
  {
    "objectID": "posts/colored_text/print_colored_text.html#background-color",
    "href": "posts/colored_text/print_colored_text.html#background-color",
    "title": "ANSI Colored Text in Terminal/Outputs",
    "section": "Background Color",
    "text": "Background Color\n\nprint(f\"\\033[49m 49 = normal \\033[0m\")\nprint(f\"\\033[40m 40 = white \\033[0m\")\nprint(f\"\\033[41m 41 = red \\033[0m\")\nprint(f\"\\033[42m 42 = green \\033[0m\")\nprint(f\"\\033[43m 43 = yellow \\033[0m\")\nprint(f\"\\033[44m 44 = blue \\033[0m\")\nprint(f\"\\033[45m 45 = pink \\033[0m\")\nprint(f\"\\033[46m 46 = teal \\033[0m\")\nprint(f\"\\033[47m 47 = gray \\033[0m\")"
  },
  {
    "objectID": "posts/colored_text/print_colored_text.html#combining",
    "href": "posts/colored_text/print_colored_text.html#combining",
    "title": "ANSI Colored Text in Terminal/Outputs",
    "section": "Combining",
    "text": "Combining\n\nprint(f\"\\033[4;31;42m; 42 = underlined red on green \\033[0m\")"
  },
  {
    "objectID": "posts/colored_text/print_colored_text.html#simple---8-colors",
    "href": "posts/colored_text/print_colored_text.html#simple---8-colors",
    "title": "ANSI Colored Text in Terminal/Outputs",
    "section": "Simple - 8 colors",
    "text": "Simple - 8 colors\n\nEffects\n\nprint(f\"\\033[0m 0 = normal \\033[0m\")\nprint(f\"\\033[1m 1 = bold \\033[0m\")\nprint(f\"\\033[3m 3 = italic \\033[0m\")\nprint(f\"\\033[4m 4 = underline \\033[0m\")\nprint(f\"\\033[9m 9 = crossed-out \\033[0m\")\n\n\n\nText Color\n\nprint(f\"\\033[0m 0 = normal \\033[0m\")\nprint(f\"\\033[30m 30 = white \\033[0m\")\nprint(f\"\\033[31m 31 = red \\033[0m\")\nprint(f\"\\033[32m 32 = green \\033[0m\")\nprint(f\"\\033[33m 33 = yellow \\033[0m\")\nprint(f\"\\033[34m 34 = blue \\033[0m\")\nprint(f\"\\033[35m 35 = pink \\033[0m\")\nprint(f\"\\033[36m 36 = teal \\033[0m\")\nprint(f\"\\033[37m 37 = gray \\033[0m\")\n\n\n\nBackground Color\n\nprint(f\"\\033[49m 49 = normal \\033[0m\")\nprint(f\"\\033[40m 40 = white \\033[0m\")\nprint(f\"\\033[41m 41 = red \\033[0m\")\nprint(f\"\\033[42m 42 = green \\033[0m\")\nprint(f\"\\033[43m 43 = yellow \\033[0m\")\nprint(f\"\\033[44m 44 = blue \\033[0m\")\nprint(f\"\\033[45m 45 = pink \\033[0m\")\nprint(f\"\\033[46m 46 = teal \\033[0m\")\nprint(f\"\\033[47m 47 = gray \\033[0m\")\n\n\n\nCombining\n\nprint(f\"\\033[4;31;42m; 42 = underlined red text on green background \\033[0m\")\n\n\n# create text + background combo table\nfor bg in range(40, 48):\n    string = \"\"\n    for txt in range(30, 38):\n        string += f\"\\033[{txt};{bg}m {txt};{bg} \\033[0m\"\n    print(string)"
  },
  {
    "objectID": "posts/colored_text/print_colored_text.html#more-advanced---256-colors-beyond",
    "href": "posts/colored_text/print_colored_text.html#more-advanced---256-colors-beyond",
    "title": "ANSI Colored Text in Terminal/Outputs",
    "section": "More Advanced - 256 Colors & Beyond!",
    "text": "More Advanced - 256 Colors & Beyond!\n\n256 colors\n * Note: only change the last number\nText\n\n# text 1st number is 38 (because that's the 'custom color' number); \nprint(\"\\033[38;5;141m purple text 141, \\033[0m\")\n\nBackground\n\n# background 1st number is 48 (background 'custom color' number)\nprint(\"\\033[48;5;154m green background 154 \\033[0m\")\n\n\n\nRGB\nOr you can use rgb values to create your own custom colors!\nText\n\n# \\033[38;2;<r>;<g>;<b>m\nprint(\"\\033[38;2;5;42;177m CUSTOM! dark blue background \\033[0m\")\n\nBackground\n\n# \\033[48;2;<r>;<g>;<b>m\nprint(\"\\033[48;2;229;242;147m CUSTOM! light yellow/green background \\033[0m\")"
  },
  {
    "objectID": "posts/colored_text/print_colored_text.html#more-advanced---256-colors-rgb",
    "href": "posts/colored_text/print_colored_text.html#more-advanced---256-colors-rgb",
    "title": "ANSI Colored Text in Terminal/Outputs",
    "section": "More Advanced - 256 Colors & RGB!",
    "text": "More Advanced - 256 Colors & RGB!\n\n256 colors\n * Note: only change the last number\nText\n\n# text 1st number is 38 (because that's the 'custom color' number); \nprint(\"\\033[38;5;141m purple text 141, \\033[0m\")\n\nBackground\n\n# background 1st number is 48 (background 'custom color' number)\nprint(\"\\033[48;5;154m green background 154 \\033[0m\")\n\n\n\nRGB\nOr you can use rgb values to create your own custom colors!\n\nText\n\n# \\033[38;2;<r>;<g>;<b>m\nprint(\"\\033[38;2;5;42;177m CUSTOM! dark blue background \\033[0m\")\n\nBackground\n\n# \\033[48;2;<r>;<g>;<b>m\nprint(\"\\033[48;2;229;242;147m CUSTOM! light yellow/green background \\033[0m\")"
  },
  {
    "objectID": "posts/groupby_snippets/groupby_snippets.html",
    "href": "posts/groupby_snippets/groupby_snippets.html",
    "title": "Pandas Groupby & Aggregations",
    "section": "",
    "text": "# IMPORTS\nimport pandas as pd\nimport numpy as np\nimport seaborn as sns # get dataset\n\n# Create Random DF\ndf = sns.load_dataset('flights')\ndf\n\n\n\n\n\n  \n    \n      \n      year\n      month\n      passengers\n    \n  \n  \n    \n      0\n      1949\n      Jan\n      112\n    \n    \n      1\n      1949\n      Feb\n      118\n    \n    \n      2\n      1949\n      Mar\n      132\n    \n    \n      3\n      1949\n      Apr\n      129\n    \n    \n      4\n      1949\n      May\n      121\n    \n    \n      ...\n      ...\n      ...\n      ...\n    \n    \n      139\n      1960\n      Aug\n      606\n    \n    \n      140\n      1960\n      Sep\n      508\n    \n    \n      141\n      1960\n      Oct\n      461\n    \n    \n      142\n      1960\n      Nov\n      390\n    \n    \n      143\n      1960\n      Dec\n      432\n    \n  \n\n144 rows × 3 columns"
  },
  {
    "objectID": "posts/groupby_snippets/groupby_snippets.html#agg-function",
    "href": "posts/groupby_snippets/groupby_snippets.html#agg-function",
    "title": "Pandas Groupby & Aggregations",
    "section": ".agg function",
    "text": ".agg function\n\ndf.groupby('year')[\"passengers\"].agg(\"mean\")\n\nyear\n1949    126.666667\n1950    139.666667\n1951    170.166667\n1952    197.000000\n1953    225.000000\n1954    238.916667\n1955    284.000000\n1956    328.250000\n1957    368.416667\n1958    381.000000\n1959    428.333333\n1960    476.166667\nName: passengers, dtype: float64\n\n\nlets you pass in a list of functions\n\ndf.groupby('year')[\"passengers\"].agg([\"mean\", \"max\", \"rank\"])\n\n\n\n\n\n  \n    \n      \n      mean\n      max\n      rank\n    \n  \n  \n    \n      0\n      NaN\n      NaN\n      2.0\n    \n    \n      1\n      NaN\n      NaN\n      3.5\n    \n    \n      2\n      NaN\n      NaN\n      8.0\n    \n    \n      3\n      NaN\n      NaN\n      7.0\n    \n    \n      4\n      NaN\n      NaN\n      6.0\n    \n    \n      ...\n      ...\n      ...\n      ...\n    \n    \n      1956\n      328.250000\n      413.0\n      NaN\n    \n    \n      1957\n      368.416667\n      467.0\n      NaN\n    \n    \n      1958\n      381.000000\n      505.0\n      NaN\n    \n    \n      1959\n      428.333333\n      559.0\n      NaN\n    \n    \n      1960\n      476.166667\n      622.0\n      NaN\n    \n  \n\n156 rows × 3 columns\n\n\n\nand assign functions to specific columns\n\ndf.groupby('year').agg({\"passengers\": [\"mean\", \"max\", \"rank\"], \"month\": \"first\"})\n\n\n\n\n\n  \n    \n      \n      passengers\n      month\n    \n    \n      \n      mean\n      max\n      rank\n      first\n    \n  \n  \n    \n      0\n      NaN\n      NaN\n      2.0\n      NaN\n    \n    \n      1\n      NaN\n      NaN\n      3.5\n      NaN\n    \n    \n      2\n      NaN\n      NaN\n      8.0\n      NaN\n    \n    \n      3\n      NaN\n      NaN\n      7.0\n      NaN\n    \n    \n      4\n      NaN\n      NaN\n      6.0\n      NaN\n    \n    \n      ...\n      ...\n      ...\n      ...\n      ...\n    \n    \n      1956\n      328.250000\n      413.0\n      NaN\n      Jan\n    \n    \n      1957\n      368.416667\n      467.0\n      NaN\n      Jan\n    \n    \n      1958\n      381.000000\n      505.0\n      NaN\n      Jan\n    \n    \n      1959\n      428.333333\n      559.0\n      NaN\n      Jan\n    \n    \n      1960\n      476.166667\n      622.0\n      NaN\n      Jan\n    \n  \n\n156 rows × 4 columns"
  },
  {
    "objectID": "posts/groupby_snippets/groupby_snippets.html#dealing-with-multiindex-headers",
    "href": "posts/groupby_snippets/groupby_snippets.html#dealing-with-multiindex-headers",
    "title": "Pandas Groupby & Aggregations",
    "section": "dealing with multiindex headers",
    "text": "dealing with multiindex headers\nthis article is the best at explaining 🔗link\n\n# multi index header\nmulti = df.groupby(\"year\").agg({\"passengers\": [np.min, np.mean, np.max]})\n\nprint(multi.columns)\ndisplay(multi)\n\nMultiIndex([('passengers', 'amin'),\n            ('passengers', 'mean'),\n            ('passengers', 'amax')],\n           )\n\n\n\n\n\n\n  \n    \n      \n      passengers\n    \n    \n      \n      amin\n      mean\n      amax\n    \n    \n      year\n      \n      \n      \n    \n  \n  \n    \n      1949\n      104\n      126.666667\n      148\n    \n    \n      1950\n      114\n      139.666667\n      170\n    \n    \n      1951\n      145\n      170.166667\n      199\n    \n    \n      1952\n      171\n      197.000000\n      242\n    \n    \n      1953\n      180\n      225.000000\n      272\n    \n    \n      1954\n      188\n      238.916667\n      302\n    \n    \n      1955\n      233\n      284.000000\n      364\n    \n    \n      1956\n      271\n      328.250000\n      413\n    \n    \n      1957\n      301\n      368.416667\n      467\n    \n    \n      1958\n      310\n      381.000000\n      505\n    \n    \n      1959\n      342\n      428.333333\n      559\n    \n    \n      1960\n      390\n      476.166667\n      622\n    \n  \n\n\n\n\nNotice how they columns seem to be layered, and the multi.columns is giving a list of tuples instead of the normal list of strings. To get rid of this there are a few ways - including the function .to_flat_index(). But my favorite way is to join the names with a underscore (_).\n\nmulti.columns = ['_'.join(col) for col in multi.columns.values]\nprint(multi.columns)\ndisplay(multi)\n\nIndex(['passengers_amin', 'passengers_mean', 'passengers_amax'], dtype='object')\n\n\n\n\n\n\n  \n    \n      \n      passengers_amin\n      passengers_mean\n      passengers_amax\n    \n    \n      year\n      \n      \n      \n    \n  \n  \n    \n      1949\n      104\n      126.666667\n      148\n    \n    \n      1950\n      114\n      139.666667\n      170\n    \n    \n      1951\n      145\n      170.166667\n      199\n    \n    \n      1952\n      171\n      197.000000\n      242\n    \n    \n      1953\n      180\n      225.000000\n      272\n    \n    \n      1954\n      188\n      238.916667\n      302\n    \n    \n      1955\n      233\n      284.000000\n      364\n    \n    \n      1956\n      271\n      328.250000\n      413\n    \n    \n      1957\n      301\n      368.416667\n      467\n    \n    \n      1958\n      310\n      381.000000\n      505\n    \n    \n      1959\n      342\n      428.333333\n      559\n    \n    \n      1960\n      390\n      476.166667\n      622"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "Allison Day",
    "section": "",
    "text": "👀 I’m interested in data science, data engineering, and data visualization!\n💗 I’m passionate about Streamlit!\n🌱 I’m currently learning how to integrate APIs to make custom visualizations\n  📫 How to reach me: allisonbeverlyday@gmail.com\n💞️ I’m looking to collaborate on data science projects!\n⚡ Fun fact: I have over 200 hours in Skyrim!\n\nExperience\nHuman Capital Management Institute | Associate Consultant/Associate Data Scientist | 2023 - Present\n\n\nEducation\nBrigham Young University - Idaho | Rexburg, ID Bachelors in Data Science | 2020 - 2022\n\n\n\n\n \n  \n   \n  \n    \n     LinkedIn\n  \n  \n    \n     Github"
  },
  {
    "objectID": "posts/fav_vs_extentions/code/delete.html",
    "href": "posts/fav_vs_extentions/code/delete.html",
    "title": "Allison Day",
    "section": "",
    "text": "a title\n\na subtitle\nheading\nanother heading\nyet another heading\nand another heading"
  },
  {
    "objectID": "posts/fav_vs_extentions/code/delete.html#a-subtitle",
    "href": "posts/fav_vs_extentions/code/delete.html#a-subtitle",
    "title": "Allison Day",
    "section": "a subtitle",
    "text": "a subtitle\nsome text"
  },
  {
    "objectID": "posts/fav_vs_extentions/code/delete.html#heading",
    "href": "posts/fav_vs_extentions/code/delete.html#heading",
    "title": "Allison Day",
    "section": "heading",
    "text": "heading\nsome more text"
  },
  {
    "objectID": "posts/fav_vs_extentions/code/delete.html#another-heading",
    "href": "posts/fav_vs_extentions/code/delete.html#another-heading",
    "title": "Allison Day",
    "section": "another heading",
    "text": "another heading\neven more text"
  },
  {
    "objectID": "posts/fav_vs_extentions/code/delete.html#yet-another-heading",
    "href": "posts/fav_vs_extentions/code/delete.html#yet-another-heading",
    "title": "Allison Day",
    "section": "yet another heading",
    "text": "yet another heading\nmore text"
  },
  {
    "objectID": "posts/fav_vs_extentions/code/delete.html#and-another-heading",
    "href": "posts/fav_vs_extentions/code/delete.html#and-another-heading",
    "title": "Allison Day",
    "section": "and another heading",
    "text": "and another heading\nmore text\n``python\ndef some_function(): pass\n``"
  },
  {
    "objectID": "posts/fav_vs_extentions/fav_extensions_post.html",
    "href": "posts/fav_vs_extentions/fav_extensions_post.html",
    "title": "VS Code Extensions Everyone Should Have",
    "section": "",
    "text": "Visual Studio Code was originally written to be web - based. Thus it feel so light. Here are some extensions that took my coding to the next level."
  },
  {
    "objectID": "posts/fav_vs_extentions/fav_extensions_post.html#general-quality-of-life",
    "href": "posts/fav_vs_extentions/fav_extensions_post.html#general-quality-of-life",
    "title": "VS Code Extensions Everyone Should Have",
    "section": "General Quality of Life",
    "text": "General Quality of Life\nThese are the extensions that improve VS Code as a whole. These are also the “optional” extensions that I use the most (i.e. not required to function like Python or Git).\n\nBetter Comments\nAs you can see by the whole section dedicated to themes, I’m a visual person. So an extension that can visually differentiate intentions between comments was a game changer. Now I can visually see the difference between warning and todo comments. Cannot recommend enough.\n\n\nBookmarks\nThis lets you put bookmarks throughout your scripts. This really helps with navigation, but I also used it to keep track of what I want to work on next and make a todo list. It also adds a bookmark page on the action bar. However, now that I usually use Jupyter Notebooks I don’t personally use this extension as much as I used to.\n\n\nLive Share\nIf you work with other people, especially remotely like I do, this tool is indispensable. It lets you both edit the same file or files at the same time. Took coding meetings from tedious backseat driving (click here, type this) to fun and productive collaboration sessions and cut the time in half. It even automatically includes their handle as a co-author in any git commits!\n\n\nTabOut\nIf you only get one extension from this article, this is it.\nInstead of using right arrows to get out of parenthesis, brackets, or quotes you just hit tab. You don’t need to lift your hand from the keyboard to hit the arrow keys, you just reach up and tab out. It nearly brought me to tears the first time I used it. Cannot recommend enough."
  },
  {
    "objectID": "posts/fav_vs_extentions/fav_extensions_post.html#themes",
    "href": "posts/fav_vs_extentions/fav_extensions_post.html#themes",
    "title": "VS Code Extensions Everyone Should Have",
    "section": "Themes",
    "text": "Themes\nThese affect the look of VS Code from colors to icons.\n\nColor Themes\nI am a very visual person, so how my code works is very important to me. Every time I open VS Code the first thing I do is hit Ctrl + K & Ctrl + T to change the visual theme to match my mood. I have come to discover that my mood linked to my environment, and that doesn’t end at my decor. If I like looking at my code I like coding more.\n\nNoctis is the most beginner friendly theme pack with only 11 choices.\nFavorites: Bordos, Sereno\nBearded Theme was my favorite for years and has a good spread of themes with 32 variations. I especially like the high contrast themes.\nFavorites: Surprising Watermelon, Ebony, Milkshake Raspberry\nRainglow is the mother of all theme packs. It has 320 themes, which is a little overwhelming at first. But I really enjoy ruffling through them for the perfect theme for my coding session. The thing I love most is that there are more than one version of each theme, a normal and a high contrast theme.\nFavorites: Earth Song Light, Frontier light, Grunge light, Hyrule Contrast, Mud Contrast\n\n\n\n\n\n\n\nLook out if a theme is high contrast or not. Some people like low contrast because the other code fades into the background and allows them to only focus on what they’re writing. I prefer high contrast themes because I have very sensitive eyes that strain easily.\n\n\n\nHonerable mentions: Github Theme, Dracula Official, & Theme\n\n\nMaterial Icon Theme & Material Product Icons\nThese themes change the look of VS Code interface itself. I never change these themes.\nI love the Material Icon Theme because not only does it change the file icons to differentiate file types but it also changes folder icons depending on its name. I love this extension so much that I have gone back through some repositories and changed folder names to fit with this extension. But if Material Icon Theme is overwhelming or not to your taste I also recommend Bearded Icons from the same developer as Bearded Theme.\nHonestly, I just use Product Icons because for consistency. It’s not important but shows VS Code’s flexibility."
  },
  {
    "objectID": "posts/fav_vs_extentions/fav_extensions_post.html#git-github",
    "href": "posts/fav_vs_extentions/fav_extensions_post.html#git-github",
    "title": "VS Code Extensions Everyone Should Have",
    "section": "Git & GitHub",
    "text": "Git & GitHub\n\nGitHub Pull Requests and Issues\nThis is a necessity if you use Github, whether you collaborate or not. It allows you to make an issue, create a branch for that issue, edit the code, create a pull request, and merge all within VS Code. In this repository I use issues to keep track of ideas for new blog posts and this is a game changer.\n\n\nGitHub Copilot (*subscription)\nAI is the future and that’s no different with coding. Github Copilot will write code for you and help streamline your flow. It comes with a 30 day free trial and is $10 a month after. I’ve just started copilot and may write a blog post about it in the future but so far it’s amazing! I’m especially curious about it’s ability to write tests.\n\n\n\n\n\n\nFree Alternative: IntelliCode & IntelliCode API Usage Examples"
  },
  {
    "objectID": "posts/fav_vs_extentions/fav_extensions_post.html#coding",
    "href": "posts/fav_vs_extentions/fav_extensions_post.html#coding",
    "title": "VS Code Extensions Everyone Should Have",
    "section": "Coding",
    "text": "Coding\n\nPython Indent\n\n\nDocumentation: Python Type Hint & autoDocstring\nPython Type Hint helps to add types to your function arguments.\nautoDocstring helps to populate summary info for your functions. This also makes documentation a lot easier (meaning you’ll actually do documentation lol).\ndef new_function(arg1: str, arg2: int):\n    \"\"\"\n    prints the arguments\n\n    Args:\n        arg1 (str): a string that you want to print\n        arg2 (int): an int that you want to print\n    \"\"\"\n    print(f\"arg1: {arg1}, arg2: {arg2}\")\n\n\nPylint\nLint, or a linter, is a static code analysis tool used to flag programming errors, bugs, stylistic errors and suspicious constructs.1 Using a linter like Pylint helps keep code consistent and up to standard.\n\n\nFormatters: Black (python & jupyter) & Prettier\nNot to be dramatic, but I would not still be coding without code formatters. As I mentioned earlier, I am a very visual person so I want my code to be pretty too. Enter: formatters.\nI have been using Black for years, and love the auto formatting on save feature. I was so attached to Black that I almost refused to use Jupyter notebooks until the March 2023 update finally allowed it. It is so satisfying to see your scrappy code instantly turn beautiful, making block-text dictionaries beautiful and messy functions readable.\nFor anything that’s not Python or Jupyter I use Prettier because it’s reliable and has tons of languages. The ones I probably use the most is YAML and markdown.\n\n\nMarkdown: Markdown All in One, Markdown Checkbox, & markdownlint\nBesides Python/Jupyter, Markdown is probably the language I use most. I use markdown to take notes and write documentation, and Github Display pages run on markdown. So I have a few extensions to help streamline the process.\nMarkdown All in One is a heavy hitter. This lets you automatically create a table of contents, Auto completions, print to HTML. My favorite feature is add/update/remove section numbering to remove the headache of manually redoing it.\nMarkdown Checkbox is a really simple extension that just inserts a checkbox.\nMarkdownLint is the same principle as Pylint and helps make markdown formatting more consistent.\n\n\n\n\n\n\nDownload this Markdown Extension Pack to get all of these extensions and more!"
  },
  {
    "objectID": "posts/fav_vs_extentions/fav_extensions_post.html#data-science",
    "href": "posts/fav_vs_extentions/fav_extensions_post.html#data-science",
    "title": "VS Code Extensions Everyone Should Have",
    "section": "Data Science",
    "text": "Data Science\n\nExcel Viewer\nLets you see previews of both CSV and XLSX files in a side viewer. You can filter and sort columns, manipulate the data, ext. I hate opening Excel and having another program bog down my system’s ram. Chef’s kiss.\n\n\nSandDance for VSCode\nSandDance lets you do some visual analysis on datasets. I like using it to get basic insights without having to manually program the charts myself. But it is a beast to run so use it wisely.\n\n\nQuarto\nQuarto is a great way to make a blog! I use it to make this blog right now. It used to be RMarkdown but you can now use it as it’s own language. Highly recommend!\n\n\n\n\n\n\nEdit your posts in Visual Mode - right click in the document and select Visual Mode. Turns Visual Studio code into an actual document editor and lets you do fancy things like insert and edit tables, format, add links, and so much more! (This works with any markdown document, not just Quarto!)"
  },
  {
    "objectID": "posts/finished posts/colored_text/print_colored_text.html",
    "href": "posts/finished posts/colored_text/print_colored_text.html",
    "title": "ANSI Colored Text in Terminal/Outputs",
    "section": "",
    "text": "needs to be inside the \"\" when printing\ncustomization starts with a \\033[ split by ; and ends with m\nprint statement ends with \\033[0m"
  },
  {
    "objectID": "posts/finished posts/colored_text/print_colored_text.html#simple---8-colors",
    "href": "posts/finished posts/colored_text/print_colored_text.html#simple---8-colors",
    "title": "ANSI Colored Text in Terminal/Outputs",
    "section": "Simple - 8 colors",
    "text": "Simple - 8 colors\n\nEffects\n\nprint(f\"\\033[0m 0 = normal \\033[0m\")\nprint(f\"\\033[1m 1 = bold \\033[0m\")\nprint(f\"\\033[3m 3 = italic \\033[0m\")\nprint(f\"\\033[4m 4 = underline \\033[0m\")\nprint(f\"\\033[9m 9 = crossed-out \\033[0m\")\n\n\n\nText Color\n\nprint(f\"\\033[0m 0 = normal \\033[0m\")\nprint(f\"\\033[30m 30 = white \\033[0m\")\nprint(f\"\\033[31m 31 = red \\033[0m\")\nprint(f\"\\033[32m 32 = green \\033[0m\")\nprint(f\"\\033[33m 33 = yellow \\033[0m\")\nprint(f\"\\033[34m 34 = blue \\033[0m\")\nprint(f\"\\033[35m 35 = pink \\033[0m\")\nprint(f\"\\033[36m 36 = teal \\033[0m\")\nprint(f\"\\033[37m 37 = gray \\033[0m\")\n\n\n\nBackground Color\n\nprint(f\"\\033[49m 49 = normal \\033[0m\")\nprint(f\"\\033[40m 40 = white \\033[0m\")\nprint(f\"\\033[41m 41 = red \\033[0m\")\nprint(f\"\\033[42m 42 = green \\033[0m\")\nprint(f\"\\033[43m 43 = yellow \\033[0m\")\nprint(f\"\\033[44m 44 = blue \\033[0m\")\nprint(f\"\\033[45m 45 = pink \\033[0m\")\nprint(f\"\\033[46m 46 = teal \\033[0m\")\nprint(f\"\\033[47m 47 = gray \\033[0m\")\n\n\n\nCombining\n\nprint(f\"\\033[4;31;42m; 42 = underlined red text on green background \\033[0m\")\n\n\n# create text + background combo table\nfor bg in range(40, 48):\n    string = \"\"\n    for txt in range(30, 38):\n        string += f\"\\033[{txt};{bg}m {txt};{bg} \\033[0m\"\n    print(string)"
  },
  {
    "objectID": "posts/finished posts/colored_text/print_colored_text.html#more-advanced---256-colors-rgb",
    "href": "posts/finished posts/colored_text/print_colored_text.html#more-advanced---256-colors-rgb",
    "title": "ANSI Colored Text in Terminal/Outputs",
    "section": "More Advanced - 256 Colors & RGB!",
    "text": "More Advanced - 256 Colors & RGB!\n\n256 colors\n * Note: only change the last number\nText\n\n# text 1st number is 38 (because that's the 'custom color' number); \nprint(\"\\033[38;5;141m purple text 141, \\033[0m\")\n\nBackground\n\n# background 1st number is 48 (background 'custom color' number)\nprint(\"\\033[48;5;154m green background 154 \\033[0m\")\n\n\n\nRGB\nOr you can use rgb values to create your own custom colors!\n\nText\n\n# \\033[38;2;<r>;<g>;<b>m\nprint(\"\\033[38;2;5;42;177m CUSTOM! dark blue background \\033[0m\")\n\nBackground\n\n# \\033[48;2;<r>;<g>;<b>m\nprint(\"\\033[48;2;229;242;147m CUSTOM! light yellow/green background \\033[0m\")"
  },
  {
    "objectID": "posts/finished posts/fav_vs_extentions/fav_extensions_post.html",
    "href": "posts/finished posts/fav_vs_extentions/fav_extensions_post.html",
    "title": "VS Code Extensions Everyone Should Have",
    "section": "",
    "text": "Visual Studio Code was originally written to be web - based. Thus it feel so light. Here are some extensions that took my coding to the next level."
  },
  {
    "objectID": "posts/finished posts/fav_vs_extentions/fav_extensions_post.html#general-quality-of-life",
    "href": "posts/finished posts/fav_vs_extentions/fav_extensions_post.html#general-quality-of-life",
    "title": "VS Code Extensions Everyone Should Have",
    "section": "General Quality of Life",
    "text": "General Quality of Life\nThese are the extensions that improve VS Code as a whole. These are also the “optional” extensions that I use the most (i.e. not required to function like Python or Git).\n\nBetter Comments\nAs you can see by the whole section dedicated to themes, I’m a visual person. So an extension that can visually differentiate intentions between comments was a game changer. Now I can visually see the difference between warning and todo comments. Cannot recommend enough.\n\n\nBookmarks\nThis lets you put bookmarks throughout your scripts. This really helps with navigation, but I also used it to keep track of what I want to work on next and make a todo list. It also adds a bookmark page on the action bar. However, now that I usually use Jupyter Notebooks I don’t personally use this extension as much as I used to.\n\n\nLive Share\nIf you work with other people, especially remotely like I do, this tool is indispensable. It lets you both edit the same file or files at the same time. Took coding meetings from tedious backseat driving (click here, type this) to fun and productive collaboration sessions and cut the time in half. It even automatically includes their handle as a co-author in any git commits!\n\n\nTabOut\nIf you only get one extension from this article, this is it.\nInstead of using right arrows to get out of parenthesis, brackets, or quotes you just hit tab. You don’t need to lift your hand from the keyboard to hit the arrow keys, you just reach up and tab out. It nearly brought me to tears the first time I used it. Cannot recommend enough."
  },
  {
    "objectID": "posts/finished posts/fav_vs_extentions/fav_extensions_post.html#themes",
    "href": "posts/finished posts/fav_vs_extentions/fav_extensions_post.html#themes",
    "title": "VS Code Extensions Everyone Should Have",
    "section": "Themes",
    "text": "Themes\nThese affect the look of VS Code from colors to icons.\n\nColor Themes\nI am a very visual person, so how my code works is very important to me. Every time I open VS Code the first thing I do is hit Ctrl + K & Ctrl + T to change the visual theme to match my mood. I have come to discover that my mood linked to my environment, and that doesn’t end at my decor. If I like looking at my code I like coding more.\n\nNoctis is the most beginner friendly theme pack with only 11 choices.\nFavorites: Bordos, Sereno\nBearded Theme was my favorite for years and has a good spread of themes with 32 variations. I especially like the high contrast themes.\nFavorites: Surprising Watermelon, Ebony, Milkshake Raspberry\nRainglow is the mother of all theme packs. It has 320 themes, which is a little overwhelming at first. But I really enjoy ruffling through them for the perfect theme for my coding session. The thing I love most is that there are more than one version of each theme, a normal and a high contrast theme.\nFavorites: Earth Song Light, Frontier light, Grunge light, Hyrule Contrast, Mud Contrast\n\n\n\n\n\n\n\nLook out if a theme is high contrast or not. Some people like low contrast because the other code fades into the background and allows them to only focus on what they’re writing. I prefer high contrast themes because I have very sensitive eyes that strain easily.\n\n\n\nHonerable mentions: Github Theme, Dracula Official, & Theme\n\n\nMaterial Icon Theme & Material Product Icons\nThese themes change the look of VS Code interface itself. I never change these themes.\nI love the Material Icon Theme because not only does it change the file icons to differentiate file types but it also changes folder icons depending on its name. I love this extension so much that I have gone back through some repositories and changed folder names to fit with this extension. But if Material Icon Theme is overwhelming or not to your taste I also recommend Bearded Icons from the same developer as Bearded Theme.\nHonestly, I just use Product Icons because for consistency. It’s not important but shows VS Code’s flexibility."
  },
  {
    "objectID": "posts/finished posts/fav_vs_extentions/fav_extensions_post.html#git-github",
    "href": "posts/finished posts/fav_vs_extentions/fav_extensions_post.html#git-github",
    "title": "VS Code Extensions Everyone Should Have",
    "section": "Git & GitHub",
    "text": "Git & GitHub\n\nGitHub Pull Requests and Issues\nThis is a necessity if you use Github, whether you collaborate or not. It allows you to make an issue, create a branch for that issue, edit the code, create a pull request, and merge all within VS Code. In this repository I use issues to keep track of ideas for new blog posts and this is a game changer.\n\n\nGitHub Copilot (*subscription)\nAI is the future and that’s no different with coding. Github Copilot will write code for you and help streamline your flow. It comes with a 30 day free trial and is $10 a month after. I’ve just started copilot and may write a blog post about it in the future but so far it’s amazing! I’m especially curious about it’s ability to write tests.\n\n\n\n\n\n\nFree Alternative: IntelliCode & IntelliCode API Usage Examples"
  },
  {
    "objectID": "posts/finished posts/fav_vs_extentions/fav_extensions_post.html#coding",
    "href": "posts/finished posts/fav_vs_extentions/fav_extensions_post.html#coding",
    "title": "VS Code Extensions Everyone Should Have",
    "section": "Coding",
    "text": "Coding\n\nPython Indent\n\n\nDocumentation: Python Type Hint & autoDocstring\nPython Type Hint helps to add types to your function arguments.\nautoDocstring helps to populate summary info for your functions. This also makes documentation a lot easier (meaning you’ll actually do documentation lol).\ndef new_function(arg1: str, arg2: int):\n    \"\"\"\n    prints the arguments\n\n    Args:\n        arg1 (str): a string that you want to print\n        arg2 (int): an int that you want to print\n    \"\"\"\n    print(f\"arg1: {arg1}, arg2: {arg2}\")\n\n\nPylint\nLint, or a linter, is a static code analysis tool used to flag programming errors, bugs, stylistic errors and suspicious constructs.1 Using a linter like Pylint helps keep code consistent and up to standard.\n\n\nFormatters: Black (python & jupyter) & Prettier\nNot to be dramatic, but I would not still be coding without code formatters. As I mentioned earlier, I am a very visual person so I want my code to be pretty too. Enter: formatters.\nI have been using Black for years, and love the auto formatting on save feature. I was so attached to Black that I almost refused to use Jupyter notebooks until the March 2023 update finally allowed it. It is so satisfying to see your scrappy code instantly turn beautiful, making block-text dictionaries beautiful and messy functions readable.\nFor anything that’s not Python or Jupyter I use Prettier because it’s reliable and has tons of languages. The ones I probably use the most is YAML and markdown.\n\n\nMarkdown: Markdown All in One, Markdown Checkbox, & markdownlint\nBesides Python/Jupyter, Markdown is probably the language I use most. I use markdown to take notes and write documentation, and Github Display pages run on markdown. So I have a few extensions to help streamline the process.\nMarkdown All in One is a heavy hitter. This lets you automatically create a table of contents, Auto completions, print to HTML. My favorite feature is add/update/remove section numbering to remove the headache of manually redoing it.\nMarkdown Checkbox is a really simple extension that just inserts a checkbox.\nMarkdownLint is the same principle as Pylint and helps make markdown formatting more consistent.\n\n\n\n\n\n\nDownload this Markdown Extension Pack to get all of these extensions and more!"
  },
  {
    "objectID": "posts/finished posts/fav_vs_extentions/fav_extensions_post.html#data-science",
    "href": "posts/finished posts/fav_vs_extentions/fav_extensions_post.html#data-science",
    "title": "VS Code Extensions Everyone Should Have",
    "section": "Data Science",
    "text": "Data Science\n\nExcel Viewer\nLets you see previews of both CSV and XLSX files in a side viewer. You can filter and sort columns, manipulate the data, ext. I hate opening Excel and having another program bog down my system’s ram. Chef’s kiss.\n\n\nSandDance for VSCode\nSandDance lets you do some visual analysis on datasets. I like using it to get basic insights without having to manually program the charts myself. But it is a beast to run so use it wisely.\n\n\nQuarto\nQuarto is a great way to make a blog! I use it to make this blog right now. It used to be RMarkdown but you can now use it as it’s own language. Highly recommend!\n\n\n\n\n\n\nEdit your posts in Visual Mode - right click in the document and select Visual Mode. Turns Visual Studio code into an actual document editor and lets you do fancy things like insert and edit tables, format, add links, and so much more! (This works with any markdown document, not just Quarto!)"
  },
  {
    "objectID": "posts/finished posts/groupby_snippets/groupby_snippets.html",
    "href": "posts/finished posts/groupby_snippets/groupby_snippets.html",
    "title": "Pandas Groupby & Aggregations",
    "section": "",
    "text": "# IMPORTS\nimport pandas as pd\nimport numpy as np\nimport seaborn as sns # get dataset\n\n# Create Random DF\ndf = sns.load_dataset('flights')\ndf\n\n\n\n\n\n  \n    \n      \n      year\n      month\n      passengers\n    \n  \n  \n    \n      0\n      1949\n      Jan\n      112\n    \n    \n      1\n      1949\n      Feb\n      118\n    \n    \n      2\n      1949\n      Mar\n      132\n    \n    \n      3\n      1949\n      Apr\n      129\n    \n    \n      4\n      1949\n      May\n      121\n    \n    \n      ...\n      ...\n      ...\n      ...\n    \n    \n      139\n      1960\n      Aug\n      606\n    \n    \n      140\n      1960\n      Sep\n      508\n    \n    \n      141\n      1960\n      Oct\n      461\n    \n    \n      142\n      1960\n      Nov\n      390\n    \n    \n      143\n      1960\n      Dec\n      432\n    \n  \n\n144 rows × 3 columns"
  },
  {
    "objectID": "posts/finished posts/groupby_snippets/groupby_snippets.html#agg-function",
    "href": "posts/finished posts/groupby_snippets/groupby_snippets.html#agg-function",
    "title": "Pandas Groupby & Aggregations",
    "section": ".agg function",
    "text": ".agg function\n\ndf.groupby('year')[\"passengers\"].agg(\"mean\")\n\nyear\n1949    126.666667\n1950    139.666667\n1951    170.166667\n1952    197.000000\n1953    225.000000\n1954    238.916667\n1955    284.000000\n1956    328.250000\n1957    368.416667\n1958    381.000000\n1959    428.333333\n1960    476.166667\nName: passengers, dtype: float64\n\n\nlets you pass in a list of functions\n\ndf.groupby('year')[\"passengers\"].agg([\"mean\", \"max\", \"rank\"])\n\n\n\n\n\n  \n    \n      \n      mean\n      max\n      rank\n    \n  \n  \n    \n      0\n      NaN\n      NaN\n      2.0\n    \n    \n      1\n      NaN\n      NaN\n      3.5\n    \n    \n      2\n      NaN\n      NaN\n      8.0\n    \n    \n      3\n      NaN\n      NaN\n      7.0\n    \n    \n      4\n      NaN\n      NaN\n      6.0\n    \n    \n      ...\n      ...\n      ...\n      ...\n    \n    \n      1956\n      328.250000\n      413.0\n      NaN\n    \n    \n      1957\n      368.416667\n      467.0\n      NaN\n    \n    \n      1958\n      381.000000\n      505.0\n      NaN\n    \n    \n      1959\n      428.333333\n      559.0\n      NaN\n    \n    \n      1960\n      476.166667\n      622.0\n      NaN\n    \n  \n\n156 rows × 3 columns\n\n\n\nand assign functions to specific columns\n\ndf.groupby('year').agg({\"passengers\": [\"mean\", \"max\", \"rank\"], \"month\": \"first\"})\n\n\n\n\n\n  \n    \n      \n      passengers\n      month\n    \n    \n      \n      mean\n      max\n      rank\n      first\n    \n  \n  \n    \n      0\n      NaN\n      NaN\n      2.0\n      NaN\n    \n    \n      1\n      NaN\n      NaN\n      3.5\n      NaN\n    \n    \n      2\n      NaN\n      NaN\n      8.0\n      NaN\n    \n    \n      3\n      NaN\n      NaN\n      7.0\n      NaN\n    \n    \n      4\n      NaN\n      NaN\n      6.0\n      NaN\n    \n    \n      ...\n      ...\n      ...\n      ...\n      ...\n    \n    \n      1956\n      328.250000\n      413.0\n      NaN\n      Jan\n    \n    \n      1957\n      368.416667\n      467.0\n      NaN\n      Jan\n    \n    \n      1958\n      381.000000\n      505.0\n      NaN\n      Jan\n    \n    \n      1959\n      428.333333\n      559.0\n      NaN\n      Jan\n    \n    \n      1960\n      476.166667\n      622.0\n      NaN\n      Jan\n    \n  \n\n156 rows × 4 columns"
  },
  {
    "objectID": "posts/finished posts/groupby_snippets/groupby_snippets.html#dealing-with-multiindex-headers",
    "href": "posts/finished posts/groupby_snippets/groupby_snippets.html#dealing-with-multiindex-headers",
    "title": "Pandas Groupby & Aggregations",
    "section": "dealing with multiindex headers",
    "text": "dealing with multiindex headers\nthis article is the best at explaining 🔗link\n\n# multi index header\nmulti = df.groupby(\"year\").agg({\"passengers\": [np.min, np.mean, np.max]})\n\nprint(multi.columns)\ndisplay(multi)\n\nMultiIndex([('passengers', 'amin'),\n            ('passengers', 'mean'),\n            ('passengers', 'amax')],\n           )\n\n\n\n\n\n\n  \n    \n      \n      passengers\n    \n    \n      \n      amin\n      mean\n      amax\n    \n    \n      year\n      \n      \n      \n    \n  \n  \n    \n      1949\n      104\n      126.666667\n      148\n    \n    \n      1950\n      114\n      139.666667\n      170\n    \n    \n      1951\n      145\n      170.166667\n      199\n    \n    \n      1952\n      171\n      197.000000\n      242\n    \n    \n      1953\n      180\n      225.000000\n      272\n    \n    \n      1954\n      188\n      238.916667\n      302\n    \n    \n      1955\n      233\n      284.000000\n      364\n    \n    \n      1956\n      271\n      328.250000\n      413\n    \n    \n      1957\n      301\n      368.416667\n      467\n    \n    \n      1958\n      310\n      381.000000\n      505\n    \n    \n      1959\n      342\n      428.333333\n      559\n    \n    \n      1960\n      390\n      476.166667\n      622\n    \n  \n\n\n\n\nNotice how they columns seem to be layered, and the multi.columns is giving a list of tuples instead of the normal list of strings. To get rid of this there are a few ways - including the function .to_flat_index(). But my favorite way is to join the names with a underscore (_).\n\nmulti.columns = ['_'.join(col) for col in multi.columns.values]\nprint(multi.columns)\ndisplay(multi)\n\nIndex(['passengers_amin', 'passengers_mean', 'passengers_amax'], dtype='object')\n\n\n\n\n\n\n  \n    \n      \n      passengers_amin\n      passengers_mean\n      passengers_amax\n    \n    \n      year\n      \n      \n      \n    \n  \n  \n    \n      1949\n      104\n      126.666667\n      148\n    \n    \n      1950\n      114\n      139.666667\n      170\n    \n    \n      1951\n      145\n      170.166667\n      199\n    \n    \n      1952\n      171\n      197.000000\n      242\n    \n    \n      1953\n      180\n      225.000000\n      272\n    \n    \n      1954\n      188\n      238.916667\n      302\n    \n    \n      1955\n      233\n      284.000000\n      364\n    \n    \n      1956\n      271\n      328.250000\n      413\n    \n    \n      1957\n      301\n      368.416667\n      467\n    \n    \n      1958\n      310\n      381.000000\n      505\n    \n    \n      1959\n      342\n      428.333333\n      559\n    \n    \n      1960\n      390\n      476.166667\n      622"
  },
  {
    "objectID": "posts/finished posts/nested_jsons/Nested_JSONs.html",
    "href": "posts/finished posts/nested_jsons/Nested_JSONs.html",
    "title": "Working with Nested JSONs",
    "section": "",
    "text": "Imports\n# this is code-fold\nimport pandas as pd\nimport json\n\njson_raw = \"code/json_example.json\"\nwith open(json_raw) as json_data:\n    json_example = json.load(json_data)\n\n\nLets say pulled an API and it gave you this json:\n{\n    \"Total\": 1,\n    \"Page\": 1,\n    \"Products\": [\n        {\n            \"ID\": 12345,\n            \"SKU\": \"Clownfish\",\n            \"Name\": \"Nemo\",\n            \"Suppliers\": [\n                {\n                    \"SupplierID\": \"67891\",\n                    \"SupplierName\": \"Little Fish Inc\",\n                    \"Cost\": 5.99\n                },\n                {\n                    \"SupplierID\": \"24601\",\n                    \"SupplierName\": \"Large Pond Co\",\n                    \"Cost\": 5.59\n                }\n            ],\n            \"PriceTiers\": {\n                \"Public Retail Price\": 24.99,\n                \"Employee Price\": 6.0\n            }\n        }\n    ]\n}\n\nBasic\n\ndf = pd.json_normalize(\n    json_example, \n    record_path=[\"Products\"],\n    errors=\"ignore\",\n    )\n\nprint(df.to_markdown())\n\n|    |    ID | SKU       | Name   | Suppliers                                                                                                                                          |   PriceTiers.Public Retail Price |   PriceTiers.Employee Price |\n|---:|------:|:----------|:-------|:---------------------------------------------------------------------------------------------------------------------------------------------------|---------------------------------:|----------------------------:|\n|  0 | 12345 | Clownfish | Nemo   | [{'SupplierID': '67891', 'SupplierName': 'Little Fish Inc', 'Cost': 5.99}, {'SupplierID': '24601', 'SupplierName': 'Large Pond Co', 'Cost': 5.59}] |                            24.99 |                           6 |\n\n\n\n\nBy Suppliers\n\ndf = pd.json_normalize(\n    json_example,\n    record_path=[\"Products\", \"Suppliers\"],\n    meta=[\n        [\"Products\"],\n    ],\n    errors=\"ignore\",\n)\n\nprint(df.to_markdown())\n\n|    |   SupplierID | SupplierName    |   Cost | Products                                                                                                                                                                                                                                                                                |\n|---:|-------------:|:----------------|-------:|:----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n|  0 |        67891 | Little Fish Inc |   5.99 | {'ID': 12345, 'SKU': 'Clownfish', 'Name': 'Nemo', 'Suppliers': [{'SupplierID': '67891', 'SupplierName': 'Little Fish Inc', 'Cost': 5.99}, {'SupplierID': '24601', 'SupplierName': 'Large Pond Co', 'Cost': 5.59}], 'PriceTiers': {'Public Retail Price': 24.99, 'Employee Price': 6.0}} |\n|  1 |        24601 | Large Pond Co   |   5.59 | {'ID': 12345, 'SKU': 'Clownfish', 'Name': 'Nemo', 'Suppliers': [{'SupplierID': '67891', 'SupplierName': 'Little Fish Inc', 'Cost': 5.99}, {'SupplierID': '24601', 'SupplierName': 'Large Pond Co', 'Cost': 5.59}], 'PriceTiers': {'Public Retail Price': 24.99, 'Employee Price': 6.0}} |\n\n\n\n\nGet Product Columns\n\ndf = pd.json_normalize(\n    json_example,\n    record_path=[\"Products\", \"Suppliers\"],\n    meta=[\n        [\"Products\", \"ID\"],\n        [\"Products\", \"SKU\"],\n        [\"Products\", \"Name\"],\n        [\"Products\", \"PriceTiers\"], \n    ],\n    errors=\"ignore\",\n)\n\nprint(df.to_markdown())\n\n|    |   SupplierID | SupplierName    |   Cost |   Products.ID | Products.SKU   | Products.Name   | Products.PriceTiers                                   |\n|---:|-------------:|:----------------|-------:|--------------:|:---------------|:----------------|:------------------------------------------------------|\n|  0 |        67891 | Little Fish Inc |   5.99 |         12345 | Clownfish      | Nemo            | {'Public Retail Price': 24.99, 'Employee Price': 6.0} |\n|  1 |        24601 | Large Pond Co   |   5.59 |         12345 | Clownfish      | Nemo            | {'Public Retail Price': 24.99, 'Employee Price': 6.0} |\n\n\n\n\nInclude all of the sub dictionary columns too\n\ndf = pd.json_normalize(\n    json_example,\n    record_path=[\"Products\", \"Suppliers\"],\n    meta=[\n        [\"Products\", \"ID\"],\n        [\"Products\", \"SKU\"],\n        [\"Products\", \"Name\"],\n        [\"Products\", \"PriceTiers\", \"Public Retail Price\"], \n        [\"Products\", \"PriceTiers\", \"Employee Price\"]\n    ],\n    errors=\"ignore\",\n)\n\nprint(df.to_markdown())\n\n|    |   SupplierID | SupplierName    |   Cost |   Products.ID | Products.SKU   | Products.Name   |   Products.PriceTiers.Public Retail Price |   Products.PriceTiers.Employee Price |\n|---:|-------------:|:----------------|-------:|--------------:|:---------------|:----------------|------------------------------------------:|-------------------------------------:|\n|  0 |        67891 | Little Fish Inc |   5.99 |         12345 | Clownfish      | Nemo            |                                     24.99 |                                    6 |\n|  1 |        24601 | Large Pond Co   |   5.59 |         12345 | Clownfish      | Nemo            |                                     24.99 |                                    6 |"
  },
  {
    "objectID": "posts/Archive/colored_text/print_colored_text.html",
    "href": "posts/Archive/colored_text/print_colored_text.html",
    "title": "ANSI Colored Text in Terminal/Outputs",
    "section": "",
    "text": "needs to be inside the \"\" when printing\ncustomization starts with a \\033[ split by ; and ends with m\nprint statement ends with \\033[0m"
  },
  {
    "objectID": "posts/Archive/colored_text/print_colored_text.html#simple---8-colors",
    "href": "posts/Archive/colored_text/print_colored_text.html#simple---8-colors",
    "title": "ANSI Colored Text in Terminal/Outputs",
    "section": "Simple - 8 colors",
    "text": "Simple - 8 colors\n\nEffects\n\nprint(f\"\\033[0m 0 = normal \\033[0m\")\nprint(f\"\\033[1m 1 = bold \\033[0m\")\nprint(f\"\\033[3m 3 = italic \\033[0m\")\nprint(f\"\\033[4m 4 = underline \\033[0m\")\nprint(f\"\\033[9m 9 = crossed-out \\033[0m\")\n\n\n\nText Color\n\nprint(f\"\\033[0m 0 = normal \\033[0m\")\nprint(f\"\\033[30m 30 = white \\033[0m\")\nprint(f\"\\033[31m 31 = red \\033[0m\")\nprint(f\"\\033[32m 32 = green \\033[0m\")\nprint(f\"\\033[33m 33 = yellow \\033[0m\")\nprint(f\"\\033[34m 34 = blue \\033[0m\")\nprint(f\"\\033[35m 35 = pink \\033[0m\")\nprint(f\"\\033[36m 36 = teal \\033[0m\")\nprint(f\"\\033[37m 37 = gray \\033[0m\")\n\n\n\nBackground Color\n\nprint(f\"\\033[49m 49 = normal \\033[0m\")\nprint(f\"\\033[40m 40 = white \\033[0m\")\nprint(f\"\\033[41m 41 = red \\033[0m\")\nprint(f\"\\033[42m 42 = green \\033[0m\")\nprint(f\"\\033[43m 43 = yellow \\033[0m\")\nprint(f\"\\033[44m 44 = blue \\033[0m\")\nprint(f\"\\033[45m 45 = pink \\033[0m\")\nprint(f\"\\033[46m 46 = teal \\033[0m\")\nprint(f\"\\033[47m 47 = gray \\033[0m\")\n\n\n\nCombining\n\nprint(f\"\\033[4;31;42m; 42 = underlined red text on green background \\033[0m\")\n\n\n# create text + background combo table\nfor bg in range(40, 48):\n    string = \"\"\n    for txt in range(30, 38):\n        string += f\"\\033[{txt};{bg}m {txt};{bg} \\033[0m\"\n    print(string)"
  },
  {
    "objectID": "posts/Archive/colored_text/print_colored_text.html#more-advanced---256-colors-rgb",
    "href": "posts/Archive/colored_text/print_colored_text.html#more-advanced---256-colors-rgb",
    "title": "ANSI Colored Text in Terminal/Outputs",
    "section": "More Advanced - 256 Colors & RGB!",
    "text": "More Advanced - 256 Colors & RGB!\n\n256 colors\n * Note: only change the last number\nText\n\n# text 1st number is 38 (because that's the 'custom color' number); \nprint(\"\\033[38;5;141m purple text 141, \\033[0m\")\n\nBackground\n\n# background 1st number is 48 (background 'custom color' number)\nprint(\"\\033[48;5;154m green background 154 \\033[0m\")\n\n\n\nRGB\nOr you can use rgb values to create your own custom colors!\n\nText\n\n# \\033[38;2;<r>;<g>;<b>m\nprint(\"\\033[38;2;5;42;177m CUSTOM! dark blue background \\033[0m\")\n\nBackground\n\n# \\033[48;2;<r>;<g>;<b>m\nprint(\"\\033[48;2;229;242;147m CUSTOM! light yellow/green background \\033[0m\")"
  },
  {
    "objectID": "posts/Archive/fav_vs_extentions/fav_extensions_post.html",
    "href": "posts/Archive/fav_vs_extentions/fav_extensions_post.html",
    "title": "VS Code Extensions Everyone Should Have",
    "section": "",
    "text": "Visual Studio Code was originally written to be web - based. Thus it feel so light. Here are some extensions that took my coding to the next level."
  },
  {
    "objectID": "posts/Archive/fav_vs_extentions/fav_extensions_post.html#general-quality-of-life",
    "href": "posts/Archive/fav_vs_extentions/fav_extensions_post.html#general-quality-of-life",
    "title": "VS Code Extensions Everyone Should Have",
    "section": "General Quality of Life",
    "text": "General Quality of Life\nThese are the extensions that improve VS Code as a whole. These are also the “optional” extensions that I use the most (i.e. not required to function like Python or Git).\n\nBetter Comments\nAs you can see by the whole section dedicated to themes, I’m a visual person. So an extension that can visually differentiate intentions between comments was a game changer. Now I can visually see the difference between warning and todo comments. Cannot recommend enough.\n\n\nBookmarks\nThis lets you put bookmarks throughout your scripts. This really helps with navigation, but I also used it to keep track of what I want to work on next and make a todo list. It also adds a bookmark page on the action bar. However, now that I usually use Jupyter Notebooks I don’t personally use this extension as much as I used to.\n\n\nLive Share\nIf you work with other people, especially remotely like I do, this tool is indispensable. It lets you both edit the same file or files at the same time. Took coding meetings from tedious backseat driving (click here, type this) to fun and productive collaboration sessions and cut the time in half. It even automatically includes their handle as a co-author in any git commits!\n\n\nTabOut\nIf you only get one extension from this article, this is it.\nInstead of using right arrows to get out of parenthesis, brackets, or quotes you just hit tab. You don’t need to lift your hand from the keyboard to hit the arrow keys, you just reach up and tab out. It nearly brought me to tears the first time I used it. Cannot recommend enough."
  },
  {
    "objectID": "posts/Archive/fav_vs_extentions/fav_extensions_post.html#themes",
    "href": "posts/Archive/fav_vs_extentions/fav_extensions_post.html#themes",
    "title": "VS Code Extensions Everyone Should Have",
    "section": "Themes",
    "text": "Themes\nThese affect the look of VS Code from colors to icons.\n\nColor Themes\nI am a very visual person, so how my code works is very important to me. Every time I open VS Code the first thing I do is hit Ctrl + K & Ctrl + T to change the visual theme to match my mood. I have come to discover that my mood linked to my environment, and that doesn’t end at my decor. If I like looking at my code I like coding more.\n\nNoctis is the most beginner friendly theme pack with only 11 choices.\nFavorites: Bordos, Sereno\nBearded Theme was my favorite for years and has a good spread of themes with 32 variations. I especially like the high contrast themes.\nFavorites: Surprising Watermelon, Ebony, Milkshake Raspberry\nRainglow is the mother of all theme packs. It has 320 themes, which is a little overwhelming at first. But I really enjoy ruffling through them for the perfect theme for my coding session. The thing I love most is that there are more than one version of each theme, a normal and a high contrast theme.\nFavorites: Earth Song Light, Frontier light, Grunge light, Hyrule Contrast, Mud Contrast\n\n\n\n\n\n\n\nLook out if a theme is high contrast or not. Some people like low contrast because the other code fades into the background and allows them to only focus on what they’re writing. I prefer high contrast themes because I have very sensitive eyes that strain easily.\n\n\n\nHonerable mentions: Github Theme, Dracula Official, & Theme\n\n\nMaterial Icon Theme & Material Product Icons\nThese themes change the look of VS Code interface itself. I never change these themes.\nI love the Material Icon Theme because not only does it change the file icons to differentiate file types but it also changes folder icons depending on its name. I love this extension so much that I have gone back through some repositories and changed folder names to fit with this extension. But if Material Icon Theme is overwhelming or not to your taste I also recommend Bearded Icons from the same developer as Bearded Theme.\nHonestly, I just use Product Icons because for consistency. It’s not important but shows VS Code’s flexibility."
  },
  {
    "objectID": "posts/Archive/fav_vs_extentions/fav_extensions_post.html#git-github",
    "href": "posts/Archive/fav_vs_extentions/fav_extensions_post.html#git-github",
    "title": "VS Code Extensions Everyone Should Have",
    "section": "Git & GitHub",
    "text": "Git & GitHub\n\nGitHub Pull Requests and Issues\nThis is a necessity if you use Github, whether you collaborate or not. It allows you to make an issue, create a branch for that issue, edit the code, create a pull request, and merge all within VS Code. In this repository I use issues to keep track of ideas for new blog posts and this is a game changer.\n\n\nGitHub Copilot (*subscription)\nAI is the future and that’s no different with coding. Github Copilot will write code for you and help streamline your flow. It comes with a 30 day free trial and is $10 a month after. I’ve just started copilot and may write a blog post about it in the future but so far it’s amazing! I’m especially curious about it’s ability to write tests.\n\n\n\n\n\n\nFree Alternative: IntelliCode & IntelliCode API Usage Examples"
  },
  {
    "objectID": "posts/Archive/fav_vs_extentions/fav_extensions_post.html#coding",
    "href": "posts/Archive/fav_vs_extentions/fav_extensions_post.html#coding",
    "title": "VS Code Extensions Everyone Should Have",
    "section": "Coding",
    "text": "Coding\n\nPython Indent\n\n\nDocumentation: Python Type Hint & autoDocstring\nPython Type Hint helps to add types to your function arguments.\nautoDocstring helps to populate summary info for your functions. This also makes documentation a lot easier (meaning you’ll actually do documentation lol).\ndef new_function(arg1: str, arg2: int):\n    \"\"\"\n    prints the arguments\n\n    Args:\n        arg1 (str): a string that you want to print\n        arg2 (int): an int that you want to print\n    \"\"\"\n    print(f\"arg1: {arg1}, arg2: {arg2}\")\n\n\nPylint\nLint, or a linter, is a static code analysis tool used to flag programming errors, bugs, stylistic errors and suspicious constructs.1 Using a linter like Pylint helps keep code consistent and up to standard.\n\n\nFormatters: Black (python & jupyter) & Prettier\nNot to be dramatic, but I would not still be coding without code formatters. As I mentioned earlier, I am a very visual person so I want my code to be pretty too. Enter: formatters.\nI have been using Black for years, and love the auto formatting on save feature. I was so attached to Black that I almost refused to use Jupyter notebooks until the March 2023 update finally allowed it. It is so satisfying to see your scrappy code instantly turn beautiful, making block-text dictionaries beautiful and messy functions readable.\nFor anything that’s not Python or Jupyter I use Prettier because it’s reliable and has tons of languages. The ones I probably use the most is YAML and markdown.\n\n\nMarkdown: Markdown All in One, Markdown Checkbox, & markdownlint\nBesides Python/Jupyter, Markdown is probably the language I use most. I use markdown to take notes and write documentation, and Github Display pages run on markdown. So I have a few extensions to help streamline the process.\nMarkdown All in One is a heavy hitter. This lets you automatically create a table of contents, Auto completions, print to HTML. My favorite feature is add/update/remove section numbering to remove the headache of manually redoing it.\nMarkdown Checkbox is a really simple extension that just inserts a checkbox.\nMarkdownLint is the same principle as Pylint and helps make markdown formatting more consistent.\n\n\n\n\n\n\nDownload this Markdown Extension Pack to get all of these extensions and more!"
  },
  {
    "objectID": "posts/Archive/fav_vs_extentions/fav_extensions_post.html#data-science",
    "href": "posts/Archive/fav_vs_extentions/fav_extensions_post.html#data-science",
    "title": "VS Code Extensions Everyone Should Have",
    "section": "Data Science",
    "text": "Data Science\n\nExcel Viewer\nLets you see previews of both CSV and XLSX files in a side viewer. You can filter and sort columns, manipulate the data, ext. I hate opening Excel and having another program bog down my system’s ram. Chef’s kiss.\n\n\nSandDance for VSCode\nSandDance lets you do some visual analysis on datasets. I like using it to get basic insights without having to manually program the charts myself. But it is a beast to run so use it wisely.\n\n\nQuarto\nQuarto is a great way to make a blog! I use it to make this blog right now. It used to be RMarkdown but you can now use it as it’s own language. Highly recommend!\n\n\n\n\n\n\nEdit your posts in Visual Mode - right click in the document and select Visual Mode. Turns Visual Studio code into an actual document editor and lets you do fancy things like insert and edit tables, format, add links, and so much more! (This works with any markdown document, not just Quarto!)"
  },
  {
    "objectID": "posts/Archive/groupby_snippets/groupby_snippets.html",
    "href": "posts/Archive/groupby_snippets/groupby_snippets.html",
    "title": "Pandas Groupby & Aggregations",
    "section": "",
    "text": "# IMPORTS\nimport pandas as pd\nimport numpy as np\nimport seaborn as sns # get dataset\n\n# Create Random DF\ndf = sns.load_dataset('flights')\ndf\n\n\n\n\n\n  \n    \n      \n      year\n      month\n      passengers\n    \n  \n  \n    \n      0\n      1949\n      Jan\n      112\n    \n    \n      1\n      1949\n      Feb\n      118\n    \n    \n      2\n      1949\n      Mar\n      132\n    \n    \n      3\n      1949\n      Apr\n      129\n    \n    \n      4\n      1949\n      May\n      121\n    \n    \n      ...\n      ...\n      ...\n      ...\n    \n    \n      139\n      1960\n      Aug\n      606\n    \n    \n      140\n      1960\n      Sep\n      508\n    \n    \n      141\n      1960\n      Oct\n      461\n    \n    \n      142\n      1960\n      Nov\n      390\n    \n    \n      143\n      1960\n      Dec\n      432\n    \n  \n\n144 rows × 3 columns"
  },
  {
    "objectID": "posts/Archive/groupby_snippets/groupby_snippets.html#agg-function",
    "href": "posts/Archive/groupby_snippets/groupby_snippets.html#agg-function",
    "title": "Pandas Groupby & Aggregations",
    "section": ".agg function",
    "text": ".agg function\n\ndf.groupby('year')[\"passengers\"].agg(\"mean\")\n\nyear\n1949    126.666667\n1950    139.666667\n1951    170.166667\n1952    197.000000\n1953    225.000000\n1954    238.916667\n1955    284.000000\n1956    328.250000\n1957    368.416667\n1958    381.000000\n1959    428.333333\n1960    476.166667\nName: passengers, dtype: float64\n\n\nlets you pass in a list of functions\n\ndf.groupby('year')[\"passengers\"].agg([\"mean\", \"max\", \"rank\"])\n\n\n\n\n\n  \n    \n      \n      mean\n      max\n      rank\n    \n  \n  \n    \n      0\n      NaN\n      NaN\n      2.0\n    \n    \n      1\n      NaN\n      NaN\n      3.5\n    \n    \n      2\n      NaN\n      NaN\n      8.0\n    \n    \n      3\n      NaN\n      NaN\n      7.0\n    \n    \n      4\n      NaN\n      NaN\n      6.0\n    \n    \n      ...\n      ...\n      ...\n      ...\n    \n    \n      1956\n      328.250000\n      413.0\n      NaN\n    \n    \n      1957\n      368.416667\n      467.0\n      NaN\n    \n    \n      1958\n      381.000000\n      505.0\n      NaN\n    \n    \n      1959\n      428.333333\n      559.0\n      NaN\n    \n    \n      1960\n      476.166667\n      622.0\n      NaN\n    \n  \n\n156 rows × 3 columns\n\n\n\nand assign functions to specific columns\n\ndf.groupby('year').agg({\"passengers\": [\"mean\", \"max\", \"rank\"], \"month\": \"first\"})\n\n\n\n\n\n  \n    \n      \n      passengers\n      month\n    \n    \n      \n      mean\n      max\n      rank\n      first\n    \n  \n  \n    \n      0\n      NaN\n      NaN\n      2.0\n      NaN\n    \n    \n      1\n      NaN\n      NaN\n      3.5\n      NaN\n    \n    \n      2\n      NaN\n      NaN\n      8.0\n      NaN\n    \n    \n      3\n      NaN\n      NaN\n      7.0\n      NaN\n    \n    \n      4\n      NaN\n      NaN\n      6.0\n      NaN\n    \n    \n      ...\n      ...\n      ...\n      ...\n      ...\n    \n    \n      1956\n      328.250000\n      413.0\n      NaN\n      Jan\n    \n    \n      1957\n      368.416667\n      467.0\n      NaN\n      Jan\n    \n    \n      1958\n      381.000000\n      505.0\n      NaN\n      Jan\n    \n    \n      1959\n      428.333333\n      559.0\n      NaN\n      Jan\n    \n    \n      1960\n      476.166667\n      622.0\n      NaN\n      Jan\n    \n  \n\n156 rows × 4 columns"
  },
  {
    "objectID": "posts/Archive/groupby_snippets/groupby_snippets.html#dealing-with-multiindex-headers",
    "href": "posts/Archive/groupby_snippets/groupby_snippets.html#dealing-with-multiindex-headers",
    "title": "Pandas Groupby & Aggregations",
    "section": "dealing with multiindex headers",
    "text": "dealing with multiindex headers\nthis article is the best at explaining 🔗link\n\n# multi index header\nmulti = df.groupby(\"year\").agg({\"passengers\": [np.min, np.mean, np.max]})\n\nprint(multi.columns)\ndisplay(multi)\n\nMultiIndex([('passengers', 'amin'),\n            ('passengers', 'mean'),\n            ('passengers', 'amax')],\n           )\n\n\n\n\n\n\n  \n    \n      \n      passengers\n    \n    \n      \n      amin\n      mean\n      amax\n    \n    \n      year\n      \n      \n      \n    \n  \n  \n    \n      1949\n      104\n      126.666667\n      148\n    \n    \n      1950\n      114\n      139.666667\n      170\n    \n    \n      1951\n      145\n      170.166667\n      199\n    \n    \n      1952\n      171\n      197.000000\n      242\n    \n    \n      1953\n      180\n      225.000000\n      272\n    \n    \n      1954\n      188\n      238.916667\n      302\n    \n    \n      1955\n      233\n      284.000000\n      364\n    \n    \n      1956\n      271\n      328.250000\n      413\n    \n    \n      1957\n      301\n      368.416667\n      467\n    \n    \n      1958\n      310\n      381.000000\n      505\n    \n    \n      1959\n      342\n      428.333333\n      559\n    \n    \n      1960\n      390\n      476.166667\n      622\n    \n  \n\n\n\n\nNotice how they columns seem to be layered, and the multi.columns is giving a list of tuples instead of the normal list of strings. To get rid of this there are a few ways - including the function .to_flat_index(). But my favorite way is to join the names with a underscore (_).\n\nmulti.columns = ['_'.join(col) for col in multi.columns.values]\nprint(multi.columns)\ndisplay(multi)\n\nIndex(['passengers_amin', 'passengers_mean', 'passengers_amax'], dtype='object')\n\n\n\n\n\n\n  \n    \n      \n      passengers_amin\n      passengers_mean\n      passengers_amax\n    \n    \n      year\n      \n      \n      \n    \n  \n  \n    \n      1949\n      104\n      126.666667\n      148\n    \n    \n      1950\n      114\n      139.666667\n      170\n    \n    \n      1951\n      145\n      170.166667\n      199\n    \n    \n      1952\n      171\n      197.000000\n      242\n    \n    \n      1953\n      180\n      225.000000\n      272\n    \n    \n      1954\n      188\n      238.916667\n      302\n    \n    \n      1955\n      233\n      284.000000\n      364\n    \n    \n      1956\n      271\n      328.250000\n      413\n    \n    \n      1957\n      301\n      368.416667\n      467\n    \n    \n      1958\n      310\n      381.000000\n      505\n    \n    \n      1959\n      342\n      428.333333\n      559\n    \n    \n      1960\n      390\n      476.166667\n      622"
  },
  {
    "objectID": "posts/Archive/nested_jsons/Nested_JSONs.html",
    "href": "posts/Archive/nested_jsons/Nested_JSONs.html",
    "title": "Working with Nested JSONs",
    "section": "",
    "text": "Imports\n# this is code-fold\nimport pandas as pd\nimport json\n\njson_raw = \"code/json_example.json\"\nwith open(json_raw) as json_data:\n    json_example = json.load(json_data)\n\n\nLets say pulled an API and it gave you this json:\n{\n    \"Total\": 1,\n    \"Page\": 1,\n    \"Products\": [\n        {\n            \"ID\": 12345,\n            \"SKU\": \"Clownfish\",\n            \"Name\": \"Nemo\",\n            \"Suppliers\": [\n                {\n                    \"SupplierID\": \"67891\",\n                    \"SupplierName\": \"Little Fish Inc\",\n                    \"Cost\": 5.99\n                },\n                {\n                    \"SupplierID\": \"24601\",\n                    \"SupplierName\": \"Large Pond Co\",\n                    \"Cost\": 5.59\n                }\n            ],\n            \"PriceTiers\": {\n                \"Public Retail Price\": 24.99,\n                \"Employee Price\": 6.0\n            }\n        }\n    ]\n}\n\nBasic\n\ndf = pd.json_normalize(\n    json_example, \n    record_path=[\"Products\"],\n    errors=\"ignore\",\n    )\n\nprint(df.to_markdown())\n\n|    |    ID | SKU       | Name   | Suppliers                                                                                                                                          |   PriceTiers.Public Retail Price |   PriceTiers.Employee Price |\n|---:|------:|:----------|:-------|:---------------------------------------------------------------------------------------------------------------------------------------------------|---------------------------------:|----------------------------:|\n|  0 | 12345 | Clownfish | Nemo   | [{'SupplierID': '67891', 'SupplierName': 'Little Fish Inc', 'Cost': 5.99}, {'SupplierID': '24601', 'SupplierName': 'Large Pond Co', 'Cost': 5.59}] |                            24.99 |                           6 |\n\n\n\n\nBy Suppliers\n\ndf = pd.json_normalize(\n    json_example,\n    record_path=[\"Products\", \"Suppliers\"],\n    meta=[\n        [\"Products\"],\n    ],\n    errors=\"ignore\",\n)\n\nprint(df.to_markdown())\n\n|    |   SupplierID | SupplierName    |   Cost | Products                                                                                                                                                                                                                                                                                |\n|---:|-------------:|:----------------|-------:|:----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n|  0 |        67891 | Little Fish Inc |   5.99 | {'ID': 12345, 'SKU': 'Clownfish', 'Name': 'Nemo', 'Suppliers': [{'SupplierID': '67891', 'SupplierName': 'Little Fish Inc', 'Cost': 5.99}, {'SupplierID': '24601', 'SupplierName': 'Large Pond Co', 'Cost': 5.59}], 'PriceTiers': {'Public Retail Price': 24.99, 'Employee Price': 6.0}} |\n|  1 |        24601 | Large Pond Co   |   5.59 | {'ID': 12345, 'SKU': 'Clownfish', 'Name': 'Nemo', 'Suppliers': [{'SupplierID': '67891', 'SupplierName': 'Little Fish Inc', 'Cost': 5.99}, {'SupplierID': '24601', 'SupplierName': 'Large Pond Co', 'Cost': 5.59}], 'PriceTiers': {'Public Retail Price': 24.99, 'Employee Price': 6.0}} |\n\n\n\n\nGet Product Columns\n\ndf = pd.json_normalize(\n    json_example,\n    record_path=[\"Products\", \"Suppliers\"],\n    meta=[\n        [\"Products\", \"ID\"],\n        [\"Products\", \"SKU\"],\n        [\"Products\", \"Name\"],\n        [\"Products\", \"PriceTiers\"], \n    ],\n    errors=\"ignore\",\n)\n\nprint(df.to_markdown())\n\n|    |   SupplierID | SupplierName    |   Cost |   Products.ID | Products.SKU   | Products.Name   | Products.PriceTiers                                   |\n|---:|-------------:|:----------------|-------:|--------------:|:---------------|:----------------|:------------------------------------------------------|\n|  0 |        67891 | Little Fish Inc |   5.99 |         12345 | Clownfish      | Nemo            | {'Public Retail Price': 24.99, 'Employee Price': 6.0} |\n|  1 |        24601 | Large Pond Co   |   5.59 |         12345 | Clownfish      | Nemo            | {'Public Retail Price': 24.99, 'Employee Price': 6.0} |\n\n\n\n\nInclude all of the sub dictionary columns too\n\ndf = pd.json_normalize(\n    json_example,\n    record_path=[\"Products\", \"Suppliers\"],\n    meta=[\n        [\"Products\", \"ID\"],\n        [\"Products\", \"SKU\"],\n        [\"Products\", \"Name\"],\n        [\"Products\", \"PriceTiers\", \"Public Retail Price\"], \n        [\"Products\", \"PriceTiers\", \"Employee Price\"]\n    ],\n    errors=\"ignore\",\n)\n\nprint(df.to_markdown())\n\n|    |   SupplierID | SupplierName    |   Cost |   Products.ID | Products.SKU   | Products.Name   |   Products.PriceTiers.Public Retail Price |   Products.PriceTiers.Employee Price |\n|---:|-------------:|:----------------|-------:|--------------:|:---------------|:----------------|------------------------------------------:|-------------------------------------:|\n|  0 |        67891 | Little Fish Inc |   5.99 |         12345 | Clownfish      | Nemo            |                                     24.99 |                                    6 |\n|  1 |        24601 | Large Pond Co   |   5.59 |         12345 | Clownfish      | Nemo            |                                     24.99 |                                    6 |"
  },
  {
    "objectID": "series.html",
    "href": "series.html",
    "title": "Series: My Series of Everything OUTSIDE projects folder",
    "section": "",
    "text": "VS Code Extensions Everyone Should Have\n\n\n\n\n\nVS Extensions that I need to survive\n\n\n\n\n\n\nMay 2, 2023\n\n\n7 min\n\n\n\n\n\n\n\n\nPandas Groupby & Aggregations\n\n\n\n\n\n\n\n\n\n\n\n\nMar 4, 2023\n\n\n5 min\n\n\n\n\n\n\n\n\nANSI Colored Text in Terminal/Outputs\n\n\n\n\n\nCredit goes to this StackOverflow thread\n\n\n\n\n\n\nFeb 28, 2023\n\n\n1 min\n\n\n\n\n\n\n\n\nWorking with Nested JSONs\n\n\n\n\n\n\n\n\n\n\n\n\nNov 6, 2022\n\n\n2 min\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "projects/series.html",
    "href": "projects/series.html",
    "title": "Series: My Series of Everything INSIDE projects folder",
    "section": "",
    "text": "This is a series of everything inside my projects folder. I will be writing about my projects, what I learned, and what I am planning to do next.\n\nPosts\n\n\n\n\n\n\n\n\n\n\n\nVS Code Extensions Everyone Should Have\n\n\n\n\n\nVS Extensions that I need to survive\n\n\n\n\n\n\nMay 2, 2023\n\n\n7 min\n\n\n\n\n\n\n\n\nPandas Groupby & Aggregations\n\n\n\n\n\n\n\n\n\n\n\n\nMar 4, 2023\n\n\n5 min\n\n\n\n\n\n\n\n\nANSI Colored Text in Terminal/Outputs\n\n\n\n\n\nCredit goes to this StackOverflow thread\n\n\n\n\n\n\nFeb 28, 2023\n\n\n1 min\n\n\n\n\n\n\n\n\nWorking with Nested JSONs\n\n\n\n\n\n\n\n\n\n\n\n\nNov 6, 2022\n\n\n2 min\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "index.html#meeting-notes",
    "href": "index.html#meeting-notes",
    "title": "Posts",
    "section": "Meeting Notes",
    "text": "Meeting Notes"
  },
  {
    "objectID": "index.html#all-posts",
    "href": "index.html#all-posts",
    "title": "allisonbday.github.io",
    "section": "All Posts",
    "text": "All Posts\n\n\n    \n      \n      \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n♾️ Quarto Customization Appendices\n\n\nEmptying my junk drawer of knowledge\n\n\n\n\nQuarto\n\n\n\n\nRandom notes and code snippets that I’ve found useful in my Quarto projects.\n\n\n\n\n\n\nMay 19, 2023\n\n\nAllison Day\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n📚 Quarto Customization Appendices\n\n\nEmptying my junk drawer of knowledge\n\n\n\n\nQuarto\n\n\n\n\nRandom notes and code snippets that I’ve found useful in my Quarto projects.\n\n\n\n\n\n\nMay 19, 2023\n\n\nAllison Day\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n🛠️ Making a Series\n\n\n\n\n\n\n\nQuarto\n\n\n\n\n\n\n\n\n\n\n\nMay 7, 2023\n\n\nAllison Day\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n🫵 Customizing the About Page\n\n\nMake your About Page more YOU 🫵\n\n\n\n\nQuarto\n\n\n\n\n\n\n\n\n\n\n\nMay 5, 2023\n\n\nAllison Day\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n📃 A Lot of Listings\n\n\nMake your Index page spark joy 🌟\n\n\n\n\nQuarto\n\n\n\n\n\n\n\n\n\n\n\nMay 5, 2023\n\n\nAllison Day\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n🎨 The Paradox of Choice\n\n\nHow to choose fonts and colors in 100 hours or less!\n\n\n\n\nQuarto\n\n\n\n\nA guide to choosing fonts and colors for your website\n\n\n\n\n\n\nMay 5, 2023\n\n\nAllison Day\n\n\n\n\n\n\n  \n\n\n\n\nVS Code Extensions Everyone Should Have\n\n\n\n\n\n\n\nVS Code\n\n\n\n\nVS Extensions that I need to survive\n\n\n\n\n\n\nMay 2, 2023\n\n\nAllison Day\n\n\n\n\n\n\n  \n\n\n\n\nVS Code Extensions Everyone Should Have\n\n\n\n\n\n\n\nVS Code\n\n\n\n\nVS Extensions that I need to survive\n\n\n\n\n\n\nMay 2, 2023\n\n\nAllison Day\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nPandas Groupby & Aggregations\n\n\n\n\n\n\n\nPython\n\n\nPandas\n\n\nCode Snippets\n\n\n\n\n\n\n\n\n\n\n\nMar 4, 2023\n\n\nAllison Day\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nPandas Groupby & Aggregations\n\n\n\n\n\n\n\nPython\n\n\nPandas\n\n\nCode Snippets\n\n\n\n\n\n\n\n\n\n\n\nMar 4, 2023\n\n\nAllison Day\n\n\n\n\n\n\n  \n\n\n\n\nANSI Colored Text in Terminal/Outputs\n\n\n\n\n\n\n\nPython\n\n\nJupyter Notebooks\n\n\nCode Snippets\n\n\n\n\nCredit goes to this StackOverflow thread\n\n\n\n\n\n\nFeb 28, 2023\n\n\nAllison Day\n\n\n\n\n\n\n  \n\n\n\n\nANSI Colored Text in Terminal/Outputs\n\n\n\n\n\n\n\nPython\n\n\nJupyter Notebooks\n\n\nCode Snippets\n\n\n\n\nCredit goes to this StackOverflow thread\n\n\n\n\n\n\nFeb 28, 2023\n\n\nAllison Day\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWorking with Nested JSONs\n\n\n\n\n\n\n\nAPIs\n\n\nJSON\n\n\n\n\n\n\n\n\n\n\n\nNov 6, 2022\n\n\nAllison Day\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nRPC sim\n\n\n\n\n\n\n\nPython\n\n\nJupyter Notebooks\n\n\nCode Snippets\n\n\nPandas\n\n\nAPIs\n\n\nJSON\n\n\nVS Code\n\n\nGithub\n\n\nQuarto\n\n\n\n\n\n\n\n\n\n\n\nNov 6, 2022\n\n\nAllison Day\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nRPC sim\n\n\n\n\n\n\n\nPython\n\n\nJupyter Notebooks\n\n\nCode Snippets\n\n\nPandas\n\n\nAPIs\n\n\nJSON\n\n\nVS Code\n\n\nGithub\n\n\nQuarto\n\n\n\n\n\n\n\n\n\n\n\nNov 6, 2022\n\n\nAllison Day\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nTitle Here\n\n\n\n\n\n\n\nPython\n\n\nJupyter Notebooks\n\n\nCode Snippets\n\n\nPandas\n\n\nAPIs\n\n\nJSON\n\n\nVS Code\n\n\nGithub\n\n\nQuarto\n\n\n\n\n\n\n\n\n\n\n\nNov 6, 2022\n\n\nAllison Day\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nTitle Here\n\n\n\n\n\n\n\nPython\n\n\nJupyter Notebooks\n\n\nCode Snippets\n\n\nPandas\n\n\nAPIs\n\n\nJSON\n\n\nVS Code\n\n\nGithub\n\n\nQuarto\n\n\n\n\n\n\n\n\n\n\n\nNov 6, 2022\n\n\nAllison Day\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWorking with Nested JSONs\n\n\n\n\n\n\n\nAPIs\n\n\nJSON\n\n\n\n\n\n\n\n\n\n\n\nNov 6, 2022\n\n\nAllison Day\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "docs/posts/Projects/CustomizingQuarto/5Appendices/Appendices.html",
    "href": "docs/posts/Projects/CustomizingQuarto/5Appendices/Appendices.html",
    "title": "♾️ Quarto Customization Appendices",
    "section": "",
    "text": "SHERIES"
  },
  {
    "objectID": "posts/Projects/RockPaperScissors/speedrunning.html",
    "href": "posts/Projects/RockPaperScissors/speedrunning.html",
    "title": "Rock Paper Scissors Simulator",
    "section": "",
    "text": "Introduction\n\n\nThe Process\n\n\n\n\n\n\nRPC sim\n\n\n\n\n\n\n\n\n\n\n\n\nNov 6, 2022\n\n\n0 min\n\n\n\n\n\n\nNo matching items\n\n\n\n\nData\n\n\nAnalysis\n\n\nResults\n\n\nWhat I Learned\n\n\nWhat I Would Do Differently\n\n\nReferences\n\n\nAcknowledgements"
  },
  {
    "objectID": "posts/Projects/RockPaperScissors/RockPaperScissors_simulation/sim2.html",
    "href": "posts/Projects/RockPaperScissors/RockPaperScissors_simulation/sim2.html",
    "title": "RPC sim",
    "section": "",
    "text": "this is a draft post"
  },
  {
    "objectID": "posts/Projects/Speedrunning API/SpeedrunAPI_app/speedrun_app.html",
    "href": "posts/Projects/Speedrunning API/SpeedrunAPI_app/speedrun_app.html",
    "title": "RPC sim",
    "section": "",
    "text": "this is a draft post"
  },
  {
    "objectID": "posts/Projects/Speedrunning API/speedrunning.html",
    "href": "posts/Projects/Speedrunning API/speedrunning.html",
    "title": "Speedrunning",
    "section": "",
    "text": "Introduction\n\n\nThe Process\n\n\n\n\n\n\nRPC sim\n\n\n\n\n\n\n\n\n\n\n\n\nNov 6, 2022\n\n\n0 min\n\n\n\n\n\n\nNo matching items\n\n\n\n\nData\n\n\nAnalysis\n\n\nResults\n\n\nWhat I Learned\n\n\nWhat I Would Do Differently\n\n\nReferences\n\n\nAcknowledgements"
  },
  {
    "objectID": "posts/Projects/Supernatural/Supernatural_project.html",
    "href": "posts/Projects/Supernatural/Supernatural_project.html",
    "title": "Supernatural Project",
    "section": "",
    "text": "Introduction\n\n\nThe Process\n\n\n\n\n\n\nTitle Here\n\n\n\n\n\n\n\n\n\n\n\n\nNov 6, 2022\n\n\n0 min\n\n\n\n\n\n\nNo matching items\n\n\n\n\nData\n\n\nAnalysis\n\n\nResults\n\n\nWhat I Learned\n\n\nWhat I Would Do Differently\n\n\nReferences\n\n\nAcknowledgements"
  },
  {
    "objectID": "posts/Projects/Supernatural/Template copy 2/template_post2.html",
    "href": "posts/Projects/Supernatural/Template copy 2/template_post2.html",
    "title": "Title Here",
    "section": "",
    "text": "this is a draft post"
  },
  {
    "objectID": "posts/Public/colored_text/print_colored_text.html",
    "href": "posts/Public/colored_text/print_colored_text.html",
    "title": "ANSI Colored Text in Terminal/Outputs",
    "section": "",
    "text": "needs to be inside the \"\" when printing\ncustomization starts with a \\033[ split by ; and ends with m\nprint statement ends with \\033[0m"
  },
  {
    "objectID": "posts/Public/colored_text/print_colored_text.html#simple---8-colors",
    "href": "posts/Public/colored_text/print_colored_text.html#simple---8-colors",
    "title": "ANSI Colored Text in Terminal/Outputs",
    "section": "Simple - 8 colors",
    "text": "Simple - 8 colors\n\nEffects\n\nprint(f\"\\033[0m 0 = normal \\033[0m\")\nprint(f\"\\033[1m 1 = bold \\033[0m\")\nprint(f\"\\033[3m 3 = italic \\033[0m\")\nprint(f\"\\033[4m 4 = underline \\033[0m\")\nprint(f\"\\033[9m 9 = crossed-out \\033[0m\")\n\n\n\nText Color\n\nprint(f\"\\033[0m 0 = normal \\033[0m\")\nprint(f\"\\033[30m 30 = white \\033[0m\")\nprint(f\"\\033[31m 31 = red \\033[0m\")\nprint(f\"\\033[32m 32 = green \\033[0m\")\nprint(f\"\\033[33m 33 = yellow \\033[0m\")\nprint(f\"\\033[34m 34 = blue \\033[0m\")\nprint(f\"\\033[35m 35 = pink \\033[0m\")\nprint(f\"\\033[36m 36 = teal \\033[0m\")\nprint(f\"\\033[37m 37 = gray \\033[0m\")\n\n\n\nBackground Color\n\nprint(f\"\\033[49m 49 = normal \\033[0m\")\nprint(f\"\\033[40m 40 = white \\033[0m\")\nprint(f\"\\033[41m 41 = red \\033[0m\")\nprint(f\"\\033[42m 42 = green \\033[0m\")\nprint(f\"\\033[43m 43 = yellow \\033[0m\")\nprint(f\"\\033[44m 44 = blue \\033[0m\")\nprint(f\"\\033[45m 45 = pink \\033[0m\")\nprint(f\"\\033[46m 46 = teal \\033[0m\")\nprint(f\"\\033[47m 47 = gray \\033[0m\")\n\n\n\nCombining\n\nprint(f\"\\033[4;31;42m; 42 = underlined red text on green background \\033[0m\")\n\n\n# create text + background combo table\nfor bg in range(40, 48):\n    string = \"\"\n    for txt in range(30, 38):\n        string += f\"\\033[{txt};{bg}m {txt};{bg} \\033[0m\"\n    print(string)"
  },
  {
    "objectID": "posts/Public/colored_text/print_colored_text.html#more-advanced---256-colors-rgb",
    "href": "posts/Public/colored_text/print_colored_text.html#more-advanced---256-colors-rgb",
    "title": "ANSI Colored Text in Terminal/Outputs",
    "section": "More Advanced - 256 Colors & RGB!",
    "text": "More Advanced - 256 Colors & RGB!\n\n256 colors\n * Note: only change the last number\nText\n\n# text 1st number is 38 (because that's the 'custom color' number);\nprint(\"\\033[38;5;141m purple text 141, \\033[0m\")\n\nBackground\n\n# background 1st number is 48 (background 'custom color' number)\nprint(\"\\033[48;5;154m green background 154 \\033[0m\")\n\n\n\nRGB\nOr you can use rgb values to create your own custom colors!\n\nText\n\n# \\033[38;2;&lt;r&gt;;&lt;g&gt;;&lt;b&gt;m\nprint(\"\\033[38;2;5;42;177m CUSTOM! dark blue background \\033[0m\")\n\nBackground\n\n# \\033[48;2;&lt;r&gt;;&lt;g&gt;;&lt;b&gt;m\nprint(\"\\033[48;2;229;242;147m CUSTOM! light yellow/green background \\033[0m\")"
  },
  {
    "objectID": "posts/Public/fav_vs_extentions/fav_extensions_post.html",
    "href": "posts/Public/fav_vs_extentions/fav_extensions_post.html",
    "title": "VS Code Extensions Everyone Should Have",
    "section": "",
    "text": "Visual Studio Code was originally written to be web - based. Thus it feel so light. Here are some extensions that took my coding to the next level."
  },
  {
    "objectID": "posts/Public/fav_vs_extentions/fav_extensions_post.html#general-quality-of-life",
    "href": "posts/Public/fav_vs_extentions/fav_extensions_post.html#general-quality-of-life",
    "title": "VS Code Extensions Everyone Should Have",
    "section": "General Quality of Life",
    "text": "General Quality of Life\nThese are the extensions that improve VS Code as a whole. These are also the “optional” extensions that I use the most (i.e. not required to function like Python or Git).\n\nBetter Comments\nAs you can see by the whole section dedicated to themes, I’m a visual person. So an extension that can visually differentiate intentions between comments was a game changer. Now I can visually see the difference between warning and todo comments. Cannot recommend enough.\n\n\nBookmarks\nThis lets you put bookmarks throughout your scripts. This really helps with navigation, but I also used it to keep track of what I want to work on next and make a todo list. It also adds a bookmark page on the action bar. However, now that I usually use Jupyter Notebooks I don’t personally use this extension as much as I used to.\n\n\nLive Share\nIf you work with other people, especially remotely like I do, this tool is indispensable. It lets you both edit the same file or files at the same time. Took coding meetings from tedious backseat driving (click here, type this) to fun and productive collaboration sessions and cut the time in half. It even automatically includes their handle as a co-author in any git commits!\n\n\nTabOut\nIf you only get one extension from this article, this is it.\nInstead of using right arrows to get out of parenthesis, brackets, or quotes you just hit tab. You don’t need to lift your hand from the keyboard to hit the arrow keys, you just reach up and tab out. It nearly brought me to tears the first time I used it. Cannot recommend enough."
  },
  {
    "objectID": "posts/Public/fav_vs_extentions/fav_extensions_post.html#themes",
    "href": "posts/Public/fav_vs_extentions/fav_extensions_post.html#themes",
    "title": "VS Code Extensions Everyone Should Have",
    "section": "Themes",
    "text": "Themes\nThese affect the look of VS Code from colors to icons.\n\nColor Themes\nI am a very visual person, so how my code works is very important to me. Every time I open VS Code the first thing I do is hit Ctrl + K & Ctrl + T to change the visual theme to match my mood. I have come to discover that my mood linked to my environment, and that doesn’t end at my decor. If I like looking at my code I like coding more.\n\nNoctis is the most beginner friendly theme pack with only 11 choices.\nFavorites: Bordos, Sereno\nBearded Theme was my favorite for years and has a good spread of themes with 32 variations. I especially like the high contrast themes.\nFavorites: Surprising Watermelon, Ebony, Milkshake Raspberry\nRainglow is the mother of all theme packs. It has 320 themes, which is a little overwhelming at first. But I really enjoy ruffling through them for the perfect theme for my coding session. The thing I love most is that there are more than one version of each theme, a normal and a high contrast theme.\nFavorites: Earth Song Light, Frontier light, Grunge light, Hyrule Contrast, Mud Contrast\n\n\n\n\n\n\n\nLook out if a theme is high contrast or not. Some people like low contrast because the other code fades into the background and allows them to only focus on what they’re writing. I prefer high contrast themes because I have very sensitive eyes that strain easily.\n\n\n\nHonerable mentions: Github Theme, Dracula Official, & Theme\n\n\nMaterial Icon Theme & Material Product Icons\nThese themes change the look of VS Code interface itself. I never change these themes.\nI love the Material Icon Theme because not only does it change the file icons to differentiate file types but it also changes folder icons depending on its name. I love this extension so much that I have gone back through some repositories and changed folder names to fit with this extension. But if Material Icon Theme is overwhelming or not to your taste I also recommend Bearded Icons from the same developer as Bearded Theme.\nHonestly, I just use Product Icons because for consistency. It’s not important but shows VS Code’s flexibility."
  },
  {
    "objectID": "posts/Public/fav_vs_extentions/fav_extensions_post.html#git-github",
    "href": "posts/Public/fav_vs_extentions/fav_extensions_post.html#git-github",
    "title": "VS Code Extensions Everyone Should Have",
    "section": "Git & GitHub",
    "text": "Git & GitHub\n\nGitHub Pull Requests and Issues\nThis is a necessity if you use Github, whether you collaborate or not. It allows you to make an issue, create a branch for that issue, edit the code, create a pull request, and merge all within VS Code. In this repository I use issues to keep track of ideas for new blog posts and this is a game changer.\n\n\nGitHub Copilot (*subscription)\nAI is the future and that’s no different with coding. Github Copilot will write code for you and help streamline your flow. It comes with a 30 day free trial and is $10 a month after. I’ve just started copilot and may write a blog post about it in the future but so far it’s amazing! I’m especially curious about it’s ability to write tests.\n\n\n\n\n\n\nFree Alternative: IntelliCode & IntelliCode API Usage Examples"
  },
  {
    "objectID": "posts/Public/fav_vs_extentions/fav_extensions_post.html#coding",
    "href": "posts/Public/fav_vs_extentions/fav_extensions_post.html#coding",
    "title": "VS Code Extensions Everyone Should Have",
    "section": "Coding",
    "text": "Coding\n\nPython Indent\n\n\nDocumentation: Python Type Hint & autoDocstring\nPython Type Hint helps to add types to your function arguments.\nautoDocstring helps to populate summary info for your functions. This also makes documentation a lot easier (meaning you’ll actually do documentation lol).\ndef new_function(arg1: str, arg2: int):\n    \"\"\"\n    prints the arguments\n\n    Args:\n        arg1 (str): a string that you want to print\n        arg2 (int): an int that you want to print\n    \"\"\"\n    print(f\"arg1: {arg1}, arg2: {arg2}\")\n\n\nPylint\nLint, or a linter, is a static code analysis tool used to flag programming errors, bugs, stylistic errors and suspicious constructs.1 Using a linter like Pylint helps keep code consistent and up to standard.\n\n\nFormatters: Black (python & jupyter) & Prettier\nNot to be dramatic, but I would not still be coding without code formatters. As I mentioned earlier, I am a very visual person so I want my code to be pretty too. Enter: formatters.\nI have been using Black for years, and love the auto formatting on save feature. I was so attached to Black that I almost refused to use Jupyter notebooks until the March 2023 update finally allowed it. It is so satisfying to see your scrappy code instantly turn beautiful, making block-text dictionaries beautiful and messy functions readable.\nFor anything that’s not Python or Jupyter I use Prettier because it’s reliable and has tons of languages. The ones I probably use the most is YAML and markdown.\n\n\nMarkdown: Markdown All in One, Markdown Checkbox, & markdownlint\nBesides Python/Jupyter, Markdown is probably the language I use most. I use markdown to take notes and write documentation, and Github Display pages run on markdown. So I have a few extensions to help streamline the process.\nMarkdown All in One is a heavy hitter. This lets you automatically create a table of contents, Auto completions, print to HTML. My favorite feature is add/update/remove section numbering to remove the headache of manually redoing it.\nMarkdown Checkbox is a really simple extension that just inserts a checkbox.\nMarkdownLint is the same principle as Pylint and helps make markdown formatting more consistent.\n\n\n\n\n\n\nDownload this Markdown Extension Pack to get all of these extensions and more!"
  },
  {
    "objectID": "posts/Public/fav_vs_extentions/fav_extensions_post.html#data-science",
    "href": "posts/Public/fav_vs_extentions/fav_extensions_post.html#data-science",
    "title": "VS Code Extensions Everyone Should Have",
    "section": "Data Science",
    "text": "Data Science\n\nExcel Viewer\nLets you see previews of both CSV and XLSX files in a side viewer. You can filter and sort columns, manipulate the data, ext. I hate opening Excel and having another program bog down my system’s ram. Chef’s kiss.\n\n\nSandDance for VSCode\nSandDance lets you do some visual analysis on datasets. I like using it to get basic insights without having to manually program the charts myself. But it is a beast to run so use it wisely.\n\n\nQuarto\nQuarto is a great way to make a blog! I use it to make this blog right now. It used to be RMarkdown but you can now use it as it’s own language. Highly recommend!\n\n\n\n\n\n\nEdit your posts in Visual Mode - right click in the document and select Visual Mode. Turns Visual Studio code into an actual document editor and lets you do fancy things like insert and edit tables, format, add links, and so much more! (This works with any markdown document, not just Quarto!)"
  },
  {
    "objectID": "posts/Public/groupby_snippets/groupby_snippets.html",
    "href": "posts/Public/groupby_snippets/groupby_snippets.html",
    "title": "Pandas Groupby & Aggregations",
    "section": "",
    "text": "# IMPORTS\nimport pandas as pd\nimport numpy as np\nimport seaborn as sns  # get dataset\n\n# Create Random DF\ndf = sns.load_dataset(\"flights\")\ndf\n\n\n\n\n\n\n\n\nyear\nmonth\npassengers\n\n\n\n\n0\n1949\nJan\n112\n\n\n1\n1949\nFeb\n118\n\n\n2\n1949\nMar\n132\n\n\n3\n1949\nApr\n129\n\n\n4\n1949\nMay\n121\n\n\n...\n...\n...\n...\n\n\n139\n1960\nAug\n606\n\n\n140\n1960\nSep\n508\n\n\n141\n1960\nOct\n461\n\n\n142\n1960\nNov\n390\n\n\n143\n1960\nDec\n432\n\n\n\n\n144 rows × 3 columns"
  },
  {
    "objectID": "posts/Public/groupby_snippets/groupby_snippets.html#agg-function",
    "href": "posts/Public/groupby_snippets/groupby_snippets.html#agg-function",
    "title": "Pandas Groupby & Aggregations",
    "section": ".agg function",
    "text": ".agg function\n\ndf.groupby(\"year\")[\"passengers\"].agg(\"mean\")\n\nyear\n1949    126.666667\n1950    139.666667\n1951    170.166667\n1952    197.000000\n1953    225.000000\n1954    238.916667\n1955    284.000000\n1956    328.250000\n1957    368.416667\n1958    381.000000\n1959    428.333333\n1960    476.166667\nName: passengers, dtype: float64\n\n\nlets you pass in a list of functions\n\ndf.groupby(\"year\")[\"passengers\"].agg([\"mean\", \"max\", \"rank\"])\n\n\n\n\n\n\n\n\nmean\nmax\nrank\n\n\n\n\n0\nNaN\nNaN\n2.0\n\n\n1\nNaN\nNaN\n3.5\n\n\n2\nNaN\nNaN\n8.0\n\n\n3\nNaN\nNaN\n7.0\n\n\n4\nNaN\nNaN\n6.0\n\n\n...\n...\n...\n...\n\n\n1956\n328.250000\n413.0\nNaN\n\n\n1957\n368.416667\n467.0\nNaN\n\n\n1958\n381.000000\n505.0\nNaN\n\n\n1959\n428.333333\n559.0\nNaN\n\n\n1960\n476.166667\n622.0\nNaN\n\n\n\n\n156 rows × 3 columns\n\n\n\nand assign functions to specific columns\n\ndf.groupby(\"year\").agg({\"passengers\": [\"mean\", \"max\", \"rank\"], \"month\": \"first\"})\n\n\n\n\n\n\n\n\npassengers\nmonth\n\n\n\nmean\nmax\nrank\nfirst\n\n\n\n\n0\nNaN\nNaN\n2.0\nNaN\n\n\n1\nNaN\nNaN\n3.5\nNaN\n\n\n2\nNaN\nNaN\n8.0\nNaN\n\n\n3\nNaN\nNaN\n7.0\nNaN\n\n\n4\nNaN\nNaN\n6.0\nNaN\n\n\n...\n...\n...\n...\n...\n\n\n1956\n328.250000\n413.0\nNaN\nJan\n\n\n1957\n368.416667\n467.0\nNaN\nJan\n\n\n1958\n381.000000\n505.0\nNaN\nJan\n\n\n1959\n428.333333\n559.0\nNaN\nJan\n\n\n1960\n476.166667\n622.0\nNaN\nJan\n\n\n\n\n156 rows × 4 columns"
  },
  {
    "objectID": "posts/Public/groupby_snippets/groupby_snippets.html#dealing-with-multiindex-headers",
    "href": "posts/Public/groupby_snippets/groupby_snippets.html#dealing-with-multiindex-headers",
    "title": "Pandas Groupby & Aggregations",
    "section": "dealing with multiindex headers",
    "text": "dealing with multiindex headers\nthis article is the best at explaining 🔗link\n\n# multi index header\nmulti = df.groupby(\"year\").agg({\"passengers\": [np.min, np.mean, np.max]})\n\nprint(multi.columns)\ndisplay(multi)\n\nMultiIndex([('passengers', 'amin'),\n            ('passengers', 'mean'),\n            ('passengers', 'amax')],\n           )\n\n\n\n\n\n\n\n\n\npassengers\n\n\n\namin\nmean\namax\n\n\nyear\n\n\n\n\n\n\n\n1949\n104\n126.666667\n148\n\n\n1950\n114\n139.666667\n170\n\n\n1951\n145\n170.166667\n199\n\n\n1952\n171\n197.000000\n242\n\n\n1953\n180\n225.000000\n272\n\n\n1954\n188\n238.916667\n302\n\n\n1955\n233\n284.000000\n364\n\n\n1956\n271\n328.250000\n413\n\n\n1957\n301\n368.416667\n467\n\n\n1958\n310\n381.000000\n505\n\n\n1959\n342\n428.333333\n559\n\n\n1960\n390\n476.166667\n622\n\n\n\n\n\n\n\nNotice how they columns seem to be layered, and the multi.columns is giving a list of tuples instead of the normal list of strings. To get rid of this there are a few ways - including the function .to_flat_index(). But my favorite way is to join the names with a underscore (_).\n\nmulti.columns = [\"_\".join(col) for col in multi.columns.values]\nprint(multi.columns)\ndisplay(multi)\n\nIndex(['passengers_amin', 'passengers_mean', 'passengers_amax'], dtype='object')\n\n\n\n\n\n\n\n\n\npassengers_amin\npassengers_mean\npassengers_amax\n\n\nyear\n\n\n\n\n\n\n\n1949\n104\n126.666667\n148\n\n\n1950\n114\n139.666667\n170\n\n\n1951\n145\n170.166667\n199\n\n\n1952\n171\n197.000000\n242\n\n\n1953\n180\n225.000000\n272\n\n\n1954\n188\n238.916667\n302\n\n\n1955\n233\n284.000000\n364\n\n\n1956\n271\n328.250000\n413\n\n\n1957\n301\n368.416667\n467\n\n\n1958\n310\n381.000000\n505\n\n\n1959\n342\n428.333333\n559\n\n\n1960\n390\n476.166667\n622"
  },
  {
    "objectID": "posts/Public/nested_jsons/Nested_JSONs.html",
    "href": "posts/Public/nested_jsons/Nested_JSONs.html",
    "title": "Working with Nested JSONs",
    "section": "",
    "text": "Imports\n# this is code-fold\nimport pandas as pd\nimport json\n\njson_raw = \"code/json_example.json\"\nwith open(json_raw) as json_data:\n    json_example = json.load(json_data)\n\n\nLets say pulled an API and it gave you this json:\n{\n    \"Total\": 1,\n    \"Page\": 1,\n    \"Products\": [\n        {\n            \"ID\": 12345,\n            \"SKU\": \"Clownfish\",\n            \"Name\": \"Nemo\",\n            \"Suppliers\": [\n                {\n                    \"SupplierID\": \"67891\",\n                    \"SupplierName\": \"Little Fish Inc\",\n                    \"Cost\": 5.99\n                },\n                {\n                    \"SupplierID\": \"24601\",\n                    \"SupplierName\": \"Large Pond Co\",\n                    \"Cost\": 5.59\n                }\n            ],\n            \"PriceTiers\": {\n                \"Public Retail Price\": 24.99,\n                \"Employee Price\": 6.0\n            }\n        }\n    ]\n}\n\nBasic\n\ndf = pd.json_normalize(\n    json_example,\n    record_path=[\"Products\"],\n    errors=\"ignore\",\n)\n\nprint(df.to_markdown())\n\n|    |    ID | SKU       | Name   | Suppliers                                                                                                                                          |   PriceTiers.Public Retail Price |   PriceTiers.Employee Price |\n|---:|------:|:----------|:-------|:---------------------------------------------------------------------------------------------------------------------------------------------------|---------------------------------:|----------------------------:|\n|  0 | 12345 | Clownfish | Nemo   | [{'SupplierID': '67891', 'SupplierName': 'Little Fish Inc', 'Cost': 5.99}, {'SupplierID': '24601', 'SupplierName': 'Large Pond Co', 'Cost': 5.59}] |                            24.99 |                           6 |\n\n\n\n\nBy Suppliers\n\ndf = pd.json_normalize(\n    json_example,\n    record_path=[\"Products\", \"Suppliers\"],\n    meta=[\n        [\"Products\"],\n    ],\n    errors=\"ignore\",\n)\n\nprint(df.to_markdown())\n\n|    |   SupplierID | SupplierName    |   Cost | Products                                                                                                                                                                                                                                                                                |\n|---:|-------------:|:----------------|-------:|:----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n|  0 |        67891 | Little Fish Inc |   5.99 | {'ID': 12345, 'SKU': 'Clownfish', 'Name': 'Nemo', 'Suppliers': [{'SupplierID': '67891', 'SupplierName': 'Little Fish Inc', 'Cost': 5.99}, {'SupplierID': '24601', 'SupplierName': 'Large Pond Co', 'Cost': 5.59}], 'PriceTiers': {'Public Retail Price': 24.99, 'Employee Price': 6.0}} |\n|  1 |        24601 | Large Pond Co   |   5.59 | {'ID': 12345, 'SKU': 'Clownfish', 'Name': 'Nemo', 'Suppliers': [{'SupplierID': '67891', 'SupplierName': 'Little Fish Inc', 'Cost': 5.99}, {'SupplierID': '24601', 'SupplierName': 'Large Pond Co', 'Cost': 5.59}], 'PriceTiers': {'Public Retail Price': 24.99, 'Employee Price': 6.0}} |\n\n\n\n\nGet Product Columns\n\ndf = pd.json_normalize(\n    json_example,\n    record_path=[\"Products\", \"Suppliers\"],\n    meta=[\n        [\"Products\", \"ID\"],\n        [\"Products\", \"SKU\"],\n        [\"Products\", \"Name\"],\n        [\"Products\", \"PriceTiers\"],\n    ],\n    errors=\"ignore\",\n)\n\nprint(df.to_markdown())\n\n|    |   SupplierID | SupplierName    |   Cost |   Products.ID | Products.SKU   | Products.Name   | Products.PriceTiers                                   |\n|---:|-------------:|:----------------|-------:|--------------:|:---------------|:----------------|:------------------------------------------------------|\n|  0 |        67891 | Little Fish Inc |   5.99 |         12345 | Clownfish      | Nemo            | {'Public Retail Price': 24.99, 'Employee Price': 6.0} |\n|  1 |        24601 | Large Pond Co   |   5.59 |         12345 | Clownfish      | Nemo            | {'Public Retail Price': 24.99, 'Employee Price': 6.0} |\n\n\n\n\nInclude all of the sub dictionary columns too\n\ndf = pd.json_normalize(\n    json_example,\n    record_path=[\"Products\", \"Suppliers\"],\n    meta=[\n        [\"Products\", \"ID\"],\n        [\"Products\", \"SKU\"],\n        [\"Products\", \"Name\"],\n        [\"Products\", \"PriceTiers\", \"Public Retail Price\"],\n        [\"Products\", \"PriceTiers\", \"Employee Price\"],\n    ],\n    errors=\"ignore\",\n)\n\nprint(df.to_markdown())\n\n|    |   SupplierID | SupplierName    |   Cost |   Products.ID | Products.SKU   | Products.Name   |   Products.PriceTiers.Public Retail Price |   Products.PriceTiers.Employee Price |\n|---:|-------------:|:----------------|-------:|--------------:|:---------------|:----------------|------------------------------------------:|-------------------------------------:|\n|  0 |        67891 | Little Fish Inc |   5.99 |         12345 | Clownfish      | Nemo            |                                     24.99 |                                    6 |\n|  1 |        24601 | Large Pond Co   |   5.59 |         12345 | Clownfish      | Nemo            |                                     24.99 |                                    6 |"
  },
  {
    "objectID": "posts/Projects/CustomizingQuarto/1AboutPage/AboutPage.html",
    "href": "posts/Projects/CustomizingQuarto/1AboutPage/AboutPage.html",
    "title": "Make your About page about YOU",
    "section": "",
    "text": "When I first made my Quarto blog, the first thing I wanted to do was claim it! So here’s a detailed guide on how to make your About page ABOUT YOU!\nHere’s a link to the Quarto About Page docs.\n\n1️⃣ Claim it\nFill in the YAML at the top. Add your name, your picture, and anything you want to highlight. I have LinkedIn and GitHub, but you can add any Bootstrap 5 icon!\ntitle: &lt;name here&gt;\nabout:\n    image: profile.jpg\n    template: jolla\n    links:\n    - icon: linkedin\n      text: LinkedIn\n      href: &lt;link to LinkedIn profile here\n    - icon: github\n      text: Github\n      href: &lt;link to GitHub account page here&gt;\nYou should also describe yourself! Avoid big blocks of text - use bullet points, lists, and unique formatting to make it easy to read (and don’t forget to use emojis!)\n-   👀 I'm interested in\n-   💗 I'm passionate about\n-   🔭 I'm currently working on ...\n-   🌱 I'm currently learning ...\n-   💞️ I'm looking to collaborate on\n-   👯 I'm looking to collaborate on ...\n-   🤔 I'm looking for help with ...\n-   💬 Ask me about ...\n-   📫 How to reach me: ...\n-   ⚡ Fun fact: ...\n\n\n\n\n\n\nTip\n\n\n\nIf you don’t want to have bullet points, have two empty spaces at the end of each line to force a line break!\n\n\nAnd don’t forget to add your education and work experience!\n\n\n2️⃣ Embeds\nQuarto is the next evolution of R Markdown, meaning it’s a markdown file! Anything that can be embedded in markdown (HTML, iframes, etc.) can be embedded in Quarto.\nA non-exhaustive list:\n\nMaps\nVideos\nTweets\nInstagram Posts\nSpotify Playlists\nGitHub Gists\n\nI decided on 2 Github stats apps, but you can add anything you want!\n![GitHub stats](https://github-readme-stats.vercel.app/api?username=&lt;username&gt;&show_icons=true)\n![Top Langs](https://github-readme-stats.vercel.app/api/top-langs/?username=&lt;username&gt;&layout=compact)\n\nI also included the icons of my favorite languages and tools using Skill Icons, and some HTML to center it\n&lt;p align=\"center\"&gt;\n  &lt;a href=\"https://skillicons.dev\"&gt; \n    &lt;img src=\"https://skillicons.dev/icons?i=py,r,md,github,vscode\"/&gt; \n  &lt;/a&gt;\n&lt;/p&gt;\n\n  \n\n\n\n3️⃣ Templates\nQuarto has five templates you can use to make your About page look even better: jolla, trestles, solana, marquee, and broadside. You can see them all here.\nI chose jolla because I liked how it was centered like my GitHub stats. To use a template, add the following to your YAML:\nabout:\n  template: solana\nIf you don’t like your image being a circle or you don’t like the size, you can change it to a rectangle by adding the following to your YAML:\nabout:\n  template: marquee\n  image-width: 10em\n  image-shape: rectangle\n\ntitle: Make your About page about YOU sub"
  },
  {
    "objectID": "posts/Projects/CustomizingQuarto/CustomizingQuarto_project.html",
    "href": "posts/Projects/CustomizingQuarto/CustomizingQuarto_project.html",
    "title": "Customizing Your Quarto Blog",
    "section": "",
    "text": "Posts\n\n\n\n\n  \n\n\n\n\nMake your About page about YOU\n\n\nThere are lots of ways to customize your Quarto About page. Here’s how I did it!\n\n\n\n\nQuarto\n\n\n\n\nCustomizing the Quarto About page with text, embeds, and more!\n\n\n\n\n\n\nMay 4, 2023\n\n\n3 min\n\n\n—\n\n\nPart 1\n\n\n\n\n\n\n  \n\n\n\n\nMaking a Series\n\n\n\n\n\n\n\nQuarto\n\n\n\n\nHow to completely redo your Quarto Posts directory to enable series! (Inspired by this post by Albert Rapp)\n\n\n\n\n\n\nMay 5, 2023\n\n\n5 min\n\n\n—\n\n\nPart 2\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "posts/Projects/all_projects.html",
    "href": "posts/Projects/all_projects.html",
    "title": "All Projects",
    "section": "",
    "text": "Order By\n       Default\n         \n          Title\n        \n         \n          Date - Oldest\n        \n         \n          Date - Newest\n        \n     \n  \n    \n      \n      \n    \n\n\n\n\n\n\n\n\n\n\nF1 Streamlit App\n\n\nCombining my love of F1 and data using Streamlit\n\n\n\npython\n\n\nstreamlit\n\n\n\nCombining my love of F1 and data using Streamlit\n\n\n\nAug 31, 2024\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nFair Isle Knitting Series\n\n\nA series on how to knit Fair Isle patterns using pixel art and python\n\n\n\nknitting\n\n\npixel-art\n\n\npython\n\n\n\nA series on how to knit Fair Isle patterns using pixel art and python\n\n\n\nMay 17, 2024\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nTemperature Blanket Generator\n\n\nA series about generating a temperature blanket pattern 🧶\n\n\n\nQuarto\n\n\nStreamlit\n\n\n\nA series about generating a temperature blanket pattern 🧶\n\n\n\nAug 28, 2023\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCustomizing Your Quarto Blog\n\n\nAdding some ✨ pizzazz ✨ to your Quarto blog\n\n\n\nQuarto\n\n\n\nA series covering how to customize your Quarto blog.\n\n\n\nMay 5, 2023\n\n\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "posts/Projects/TemperatureBlanket/TemperatureBlanket_project.html",
    "href": "posts/Projects/TemperatureBlanket/TemperatureBlanket_project.html",
    "title": "Temperature Blanket Project",
    "section": "",
    "text": "Introduction\n\n\nThe Process\n\n\n\n\n\nNo matching items\n\n\n\n\nData\n\n\nAnalysis\n\n\nResults\n\n\nWhat I Learned\n\n\nWhat I Would Do Differently\n\n\nReferences\n\n\nAcknowledgements"
  },
  {
    "objectID": "posts/Projects/CustomizingQuarto/4MakingSeries/MakingSeries.html",
    "href": "posts/Projects/CustomizingQuarto/4MakingSeries/MakingSeries.html",
    "title": "🛠️ Making a Series",
    "section": "",
    "text": "Series let you group related posts. I use them to group posts that are part of a larger project.\n\n\nTo enable series, I had to rearrange my Quarto posts folder. I added some comments to explain what each change is for.\n├───.quarto\n1├───index.qmd\n├───docs\n2└───posts\n3    ├───Projects\n4    |   ├───all_projects.qmd\n5    │   ├───Series1\n6    │   |   ├───S1_project.qmd\n7    │   │   ├───S1_Post1\n    |   |   |   └───S1_Post1.qmd\n    │   │   └───S1_Post2\n    |   |       └───S1_Post2.qmd\n    │   └───Series2\n    |       ├───S2_project.qmd\n    │       └───S2_Post1\n8    └───Public\n        ├───Post1\n        │   └───Post1.qmd\n        └───Post2\n            └───Post2.qmd\n\n1\n\nindex.qmd file is the first file that Quarto looks for when building your site. It is the page that will contain links to all of your posts.\n\n2\n\nposts folder is where all of your posts are stored. I added two subfolders: Projects and Public.\n\n3\n\nProjects is where I store all of my posts that belong to a series.\n\n4\n\nan all_projects.qmd file. This file is used to generate the listing page exclusively for the Projects folder.\n\n5\n\nSeries1 is a series folder. Inside each series folder are the posts that belong to that series.\n\n6\n\nS1_project.qmd is the master post for the series. It is the post that will contain links to all of the posts in the series and explain what the series is about. It will be the post that is linked to from the all_projects.qmd file.\n\n7\n\nS1_Post1 is a post folder. Is a normal post folder. Inside each post folder is a .qmd file. This is the file that contains the content of the post.\n\n8\n\nPublic is where I store all of my completed stand-alone posts.\n\n\n\n\n\n\nYou can add multiple listings to your index page. To add a new listing to the index page, you will need to create ids for each one so we can reference them later.\n---\nlisting:\n  - id: projects\n    contents: \n1    - \"posts/Projects/*/*.qmd\"\n\n  - id: posts\n    contents: \n2    - posts\n3    - \"!posts/Projects/all_projects.qmd\"\n4    - \"!posts/Projects/*/*.qmd\"\n---\n\n# Projects\n\n5:::{#projects}\n:::\n\n# Posts\n\n:::{#posts}\n:::\n\n1\n\nOnly grabs the master post for each series\n\n2\n\nGrabs all .qmd files in the posts folder\n\n3\n\nexcludes the series listing page\n\n4\n\nexcludes the master posts\n\n5\n\nThis code will be replaced with the listing\n\n\nYou can customize both of these as you would any normal listing. I prefer my projects to be listed in a grid almost carousel style, so I added the following code to the index.qmd file.\nlisting:\n  - id: projects\n    contents: \"posts/Projects/*/*.qmd\"\n    sort: date desc\n    type: grid\n    grid-item-border: false\n    grid-columns: 1\n    page-size: 1\n    max-items: 5\n    image-height: 250px\n    image-placeholder: placeholder.gif\n    max-description-length: 250\n    categories: unnumbered\n\n\n\nThe all_projects.qmd file is the file that will be used to generate the listing page for the Projects folder. This is the page that will contain links to all of the series master posts.\ntitle: \"All Projects\"\nlisting:\n  - id: all_projects\n    contents:   \n1    - \"*/*.qmd\"\n2    - \"!*/*/*.qmd\"\n\n1\n\nGrabs all .qmd files in the Projects folder\n\n2\n\nExcludes any posts OTHER than master posts\n\n\n\n\n\nThe master post is the post that will contain links to all of the posts in the series and explain what the series is about. It will be the post that is linked to from the all_projects.qmd file and be featured in the index projects listing.\nBecause it’s also on the index page, you will need to add a date, subtitle, description, and categories to the metadata.\nThe listing will also need an id so we can reference it later and place it where we want on the page.\n---\ntitle: Master Post\ndate: 05-05-2023\nsubtitle: Subtitle to the Master Post\ndescription: This is a master post\ncategories: [Quarto]\n# image: \n\nlisting: \n    id: project-posts\n    contents: \\*.qmd\n---\n\n# Project Overview\n\nExplain your project, your thought process, and what you hope to accomplish.\n\n# All Posts\n:::{#project-posts}\n:::"
  },
  {
    "objectID": "posts/Projects/CustomizingQuarto/4MakingSeries/MakingSeries.html#directory-structure",
    "href": "posts/Projects/CustomizingQuarto/4MakingSeries/MakingSeries.html#directory-structure",
    "title": "🛠️ Making a Series",
    "section": "",
    "text": "To enable series, I had to rearrange my Quarto posts folder. I added some comments to explain what each change is for.\n├───.quarto\n1├───index.qmd\n├───docs\n2└───posts\n3    ├───Projects\n4    |   ├───all_projects.qmd\n5    │   ├───Series1\n6    │   |   ├───S1_project.qmd\n7    │   │   ├───S1_Post1\n    |   |   |   └───S1_Post1.qmd\n    │   │   └───S1_Post2\n    |   |       └───S1_Post2.qmd\n    │   └───Series2\n    |       ├───S2_project.qmd\n    │       └───S2_Post1\n8    └───Public\n        ├───Post1\n        │   └───Post1.qmd\n        └───Post2\n            └───Post2.qmd\n\n1\n\nindex.qmd file is the first file that Quarto looks for when building your site. It is the page that will contain links to all of your posts.\n\n2\n\nposts folder is where all of your posts are stored. I added two subfolders: Projects and Public.\n\n3\n\nProjects is where I store all of my posts that belong to a series.\n\n4\n\nan all_projects.qmd file. This file is used to generate the listing page exclusively for the Projects folder.\n\n5\n\nSeries1 is a series folder. Inside each series folder are the posts that belong to that series.\n\n6\n\nS1_project.qmd is the master post for the series. It is the post that will contain links to all of the posts in the series and explain what the series is about. It will be the post that is linked to from the all_projects.qmd file.\n\n7\n\nS1_Post1 is a post folder. Is a normal post folder. Inside each post folder is a .qmd file. This is the file that contains the content of the post.\n\n8\n\nPublic is where I store all of my completed stand-alone posts."
  },
  {
    "objectID": "posts/Projects/CustomizingQuarto/4MakingSeries/MakingSeries.html#index-page",
    "href": "posts/Projects/CustomizingQuarto/4MakingSeries/MakingSeries.html#index-page",
    "title": "🛠️ Making a Series",
    "section": "",
    "text": "You can add multiple listings to your index page. To add a new listing to the index page, you will need to create ids for each one so we can reference them later.\n---\nlisting:\n  - id: projects\n    contents: \n1    - \"posts/Projects/*/*.qmd\"\n\n  - id: posts\n    contents: \n2    - posts\n3    - \"!posts/Projects/all_projects.qmd\"\n4    - \"!posts/Projects/*/*.qmd\"\n---\n\n# Projects\n\n5:::{#projects}\n:::\n\n# Posts\n\n:::{#posts}\n:::\n\n1\n\nOnly grabs the master post for each series\n\n2\n\nGrabs all .qmd files in the posts folder\n\n3\n\nexcludes the series listing page\n\n4\n\nexcludes the master posts\n\n5\n\nThis code will be replaced with the listing\n\n\nYou can customize both of these as you would any normal listing. I prefer my projects to be listed in a grid almost carousel style, so I added the following code to the index.qmd file.\nlisting:\n  - id: projects\n    contents: \"posts/Projects/*/*.qmd\"\n    sort: date desc\n    type: grid\n    grid-item-border: false\n    grid-columns: 1\n    page-size: 1\n    max-items: 5\n    image-height: 250px\n    image-placeholder: placeholder.gif\n    max-description-length: 250\n    categories: unnumbered"
  },
  {
    "objectID": "posts/Projects/CustomizingQuarto/4MakingSeries/MakingSeries.html#all-projects-listing",
    "href": "posts/Projects/CustomizingQuarto/4MakingSeries/MakingSeries.html#all-projects-listing",
    "title": "🛠️ Making a Series",
    "section": "",
    "text": "The all_projects.qmd file is the file that will be used to generate the listing page for the Projects folder. This is the page that will contain links to all of the series master posts.\ntitle: \"All Projects\"\nlisting:\n  - id: all_projects\n    contents:   \n1    - \"*/*.qmd\"\n2    - \"!*/*/*.qmd\"\n\n1\n\nGrabs all .qmd files in the Projects folder\n\n2\n\nExcludes any posts OTHER than master posts"
  },
  {
    "objectID": "posts/Projects/CustomizingQuarto/4MakingSeries/MakingSeries.html#master-post-listing",
    "href": "posts/Projects/CustomizingQuarto/4MakingSeries/MakingSeries.html#master-post-listing",
    "title": "🛠️ Making a Series",
    "section": "",
    "text": "The master post is the post that will contain links to all of the posts in the series and explain what the series is about. It will be the post that is linked to from the all_projects.qmd file and be featured in the index projects listing.\nBecause it’s also on the index page, you will need to add a date, subtitle, description, and categories to the metadata.\nThe listing will also need an id so we can reference it later and place it where we want on the page.\n---\ntitle: Master Post\ndate: 05-05-2023\nsubtitle: Subtitle to the Master Post\ndescription: This is a master post\ncategories: [Quarto]\n# image: \n\nlisting: \n    id: project-posts\n    contents: \\*.qmd\n---\n\n# Project Overview\n\nExplain your project, your thought process, and what you hope to accomplish.\n\n# All Posts\n:::{#project-posts}\n:::"
  },
  {
    "objectID": "posts/Projects/CustomizingQuarto/3MakingSeries/MakingSeries.html",
    "href": "posts/Projects/CustomizingQuarto/3MakingSeries/MakingSeries.html",
    "title": "Making a Series",
    "section": "",
    "text": "Why Make a Series?\nSeries let you group related posts. I use them to group posts that are part of a larger project.\n\n\nDirectory Structure\nTo enable series, I had to rearrange my Quarto posts folder. I added some comments to explain what each change is for.\n├───.quarto\n1├───index.qmd\n├───docs\n2└───posts\n3    ├───Projects\n4    |   ├───all_projects.qmd\n5    │   ├───Series1\n6    │   |   ├───S1_project.qmd\n7    │   │   ├───S1_Post1\n    |   |   |   └───S1_Post1.qmd\n    │   │   └───S1_Post2\n    |   |       └───S1_Post2.qmd\n    │   └───Series2\n    |       ├───S2_project.qmd\n    │       └───S2_Post1\n8    └───Public\n        ├───Post1\n        │   └───Post1.qmd\n        └───Post2\n            └───Post2.qmd\n\n1\n\nindex.qmd file is the first file that Quarto looks for when building your site. It is the page that will contain links to all of your posts.\n\n2\n\nposts folder is where all of your posts are stored. I added two subfolders: Projects and Public.\n\n3\n\nProjects is where I store all of my posts that belong to a series.\n\n4\n\nan all_projects.qmd file. This file is used to generate the listing page exclusively for the Projects folder.\n\n5\n\nSeries1 is a series folder. Inside each series folder are the posts that belong to that series.\n\n6\n\nS1_project.qmd is the master post for the series. It is the post that will contain links to all of the posts in the series and explain what the series is about. It will be the post that is linked to from the all_projects.qmd file.\n\n7\n\nS1_Post1 is a post folder. Is a normal post folder. Inside each post folder is a .qmd file. This is the file that contains the content of the post.\n\n8\n\nPublic is where I store all of my completed stand-alone posts.\n\n\n\n\nIndex Page\n\nYou can add multiple listings to your index page. To add a new listing to the index page, you will need to create ids for each one so we can reference them later.\n---\nlisting:\n  - id: projects\n    contents: \n1    - \"posts/Projects/*/*.qmd\"\n\n  - id: posts\n    contents: \n2    - posts\n3    - \"!posts/Projects/all_projects.qmd\"\n4    - \"!posts/Projects/*/*.qmd\"\n---\n\n# Projects\n\n5:::{#projects}\n:::\n\n# Posts\n\n:::{#posts}\n:::\n\n1\n\nOnly grabs the master post for each series\n\n2\n\nGrabs all .qmd files in the posts folder\n\n3\n\nexcludes all_projects.qmd file\n\n4\n\nexcludes the master posts\n\n5\n\nThis code will be replaced with the listing\n\n\nYou can customize both of these as you would any normal listing. I prefer my projects to be listed in a grid (like a carousel), so I added the following code to the index.qmd file.\nlisting:\n  - id: projects\n    contents: \"posts/Projects/*/*.qmd\"\n    sort: date desc\n    type: grid\n    grid-item-border: false\n    grid-columns: 1\n    page-size: 1\n    max-items: 5\n    image-height: 250px\n    image-placeholder: placeholder.gif\n    max-description-length: 250\n    categories: unnumbered\nIf you want to learn how to customize listings, check out the listing documentation.\n\n\nAll Projects Listing\nThe all_projects.qmd file is the file that will be used to generate the listing page for the Projects folder. This is the page that will contain links to all of the series master posts.\ntitle: \"All Projects\"\nlisting:\n  - id: all_projects\n    contents:   \n1    - \"*/*.qmd\"\n2    - \"!*/*/*.qmd\"\n\n1\n\nGrabs all .qmd files in the Projects folder\n\n2\n\nExcludes any posts OTHER than master posts\n\n\n\n\nMaster Post Listing\nThe master post is the post that will contain links to all of the posts in the series and explain what the series is about. It will be the post that is linked to from the all_projects.qmd file and be featured in the index projects listing.\nBecause it’s also on the index page, you will need to add a title, date, subtitle, description, and categories to the metadata.\nThe listing will also need an id so we can reference it later and place it where we want on the page.\n---\ntitle: Master Post\ndate: 05-05-2023\nsubtitle: Subtitle to the Master Post\ndescription: This is a master post\ncategories: [Quarto]\n\nlisting: \n    id: project-posts\n    contents: \\*.qmd\n---\n\n# Project Overview\n\nExplain your project, thought process, and results.\n\n\n# All Posts\n\n:::{#project-posts}\n:::"
  },
  {
    "objectID": "posts/Projects/CustomizingQuarto/3MakingSeries/MakingSeries.html#directory-structure",
    "href": "posts/Projects/CustomizingQuarto/3MakingSeries/MakingSeries.html#directory-structure",
    "title": "🛠️ Making a Series",
    "section": "",
    "text": "To enable series, I had to rearrange my Quarto posts folder. I added some comments to explain what each change is for.\n├───.quarto\n1├───index.qmd\n├───docs\n2└───posts\n3    ├───Projects\n4    |   ├───all_projects.qmd\n5    │   ├───Series1\n6    │   |   ├───S1_project.qmd\n7    │   │   ├───S1_Post1\n    |   |   |   └───S1_Post1.qmd\n    │   │   └───S1_Post2\n    |   |       └───S1_Post2.qmd\n    │   └───Series2\n    |       ├───S2_project.qmd\n    │       └───S2_Post1\n8    └───Public\n        ├───Post1\n        │   └───Post1.qmd\n        └───Post2\n            └───Post2.qmd\n\n1\n\nindex.qmd file is the first file that Quarto looks for when building your site. It is the page that will contain links to all of your posts.\n\n2\n\nposts folder is where all of your posts are stored. I added two subfolders: Projects and Public.\n\n3\n\nProjects is where I store all of my posts that belong to a series.\n\n4\n\nan all_projects.qmd file. This file is used to generate the listing page exclusively for the Projects folder.\n\n5\n\nSeries1 is a series folder. Inside each series folder are the posts that belong to that series.\n\n6\n\nS1_project.qmd is the master post for the series. It is the post that will contain links to all of the posts in the series and explain what the series is about. It will be the post that is linked to from the all_projects.qmd file.\n\n7\n\nS1_Post1 is a post folder. Is a normal post folder. Inside each post folder is a .qmd file. This is the file that contains the content of the post.\n\n8\n\nPublic is where I store all of my completed stand-alone posts."
  },
  {
    "objectID": "posts/Projects/CustomizingQuarto/3MakingSeries/MakingSeries.html#index-page",
    "href": "posts/Projects/CustomizingQuarto/3MakingSeries/MakingSeries.html#index-page",
    "title": "🛠️ Making a Series",
    "section": "",
    "text": "You can add multiple listings to your index page. To add a new listing to the index page, you will need to create ids for each one so we can reference them later.\n---\nlisting:\n  - id: projects\n    contents: \n1    - \"posts/Projects/*/*.qmd\"\n\n  - id: posts\n    contents: \n2    - posts\n3    - \"!posts/Projects/all_projects.qmd\"\n4    - \"!posts/Projects/*/*.qmd\"\n---\n\n# Projects\n\n5:::{#projects}\n:::\n\n# Posts\n\n:::{#posts}\n:::\n\n1\n\nOnly grabs the master post for each series\n\n2\n\nGrabs all .qmd files in the posts folder\n\n3\n\nexcludes the series listing page\n\n4\n\nexcludes the master posts\n\n5\n\nThis code will be replaced with the listing\n\n\nYou can customize both of these as you would any normal listing. I prefer my projects to be listed in a grid almost carousel style, so I added the following code to the index.qmd file.\nlisting:\n  - id: projects\n    contents: \"posts/Projects/*/*.qmd\"\n    sort: date desc\n    type: grid\n    grid-item-border: false\n    grid-columns: 1\n    page-size: 1\n    max-items: 5\n    image-height: 250px\n    image-placeholder: placeholder.gif\n    max-description-length: 250\n    categories: unnumbered"
  },
  {
    "objectID": "posts/Projects/CustomizingQuarto/3MakingSeries/MakingSeries.html#all-projects-listing",
    "href": "posts/Projects/CustomizingQuarto/3MakingSeries/MakingSeries.html#all-projects-listing",
    "title": "🛠️ Making a Series",
    "section": "",
    "text": "The all_projects.qmd file is the file that will be used to generate the listing page for the Projects folder. This is the page that will contain links to all of the series master posts.\ntitle: \"All Projects\"\nlisting:\n  - id: all_projects\n    contents:   \n1    - \"*/*.qmd\"\n2    - \"!*/*/*.qmd\"\n\n1\n\nGrabs all .qmd files in the Projects folder\n\n2\n\nExcludes any posts OTHER than master posts"
  },
  {
    "objectID": "posts/Projects/CustomizingQuarto/3MakingSeries/MakingSeries.html#master-post-listing",
    "href": "posts/Projects/CustomizingQuarto/3MakingSeries/MakingSeries.html#master-post-listing",
    "title": "🛠️ Making a Series",
    "section": "",
    "text": "The master post is the post that will contain links to all of the posts in the series and explain what the series is about. It will be the post that is linked to from the all_projects.qmd file and be featured in the index projects listing.\nBecause it’s also on the index page, you will need to add a title, date, subtitle, description, and categories to the metadata.\nThe listing will also need an id so we can reference it later and place it where we want on the page.\n---\ntitle: Master Post\ndate: 05-05-2023\nsubtitle: Subtitle to the Master Post\ndescription: This is a master post\ncategories: [Quarto]\n\nlisting: \n    id: project-posts\n    contents: \\*.qmd\n---\n\n# Project Overview\n\nExplain your project, thought process, and results.\n\n\n# All Posts\n\n:::{#project-posts}\n:::"
  },
  {
    "objectID": "posts/Public/fav_vs_extentions/fav_extensions_post.html#footnotes",
    "href": "posts/Public/fav_vs_extentions/fav_extensions_post.html#footnotes",
    "title": "VS Code Extensions Everyone Should Have",
    "section": "Footnotes",
    "text": "Footnotes\n\n\n“Lint” wiki↩︎"
  },
  {
    "objectID": "posts/Projects/CustomizingQuarto/999RandomQuarto/Appendices.html#code-annotation",
    "href": "posts/Projects/CustomizingQuarto/999RandomQuarto/Appendices.html#code-annotation",
    "title": "SERIES",
    "section": "Code Annotation",
    "text": "Code Annotation\nhttps://quarto.org/docs/authoring/code-annotation.html\n1def hello(name:str):\n2    greeting = f\"👋 hello {name}!\"\n    return greeting\n\n1\n\nThis is a function that says hello\n\n2\n\nThis is the greeting"
  },
  {
    "objectID": "posts/Projects/CustomizingQuarto/999RandomQuarto/Appendices.html#includes",
    "href": "posts/Projects/CustomizingQuarto/999RandomQuarto/Appendices.html#includes",
    "title": "SERIES",
    "section": "Includes",
    "text": "Includes\nhttps://quarto.org/docs/authoring/includes.html"
  },
  {
    "objectID": "posts/Projects/CustomizingQuarto/999RandomQuarto/Appendices.html#dark-mode",
    "href": "posts/Projects/CustomizingQuarto/999RandomQuarto/Appendices.html#dark-mode",
    "title": "SERIES",
    "section": "Dark Mode",
    "text": "Dark Mode\nhttps://quarto.org/docs/websites/website-tools.html#dark-mode"
  },
  {
    "objectID": "posts/Projects/CustomizingQuarto/999RandomQuarto/Appendices.html#page-layout",
    "href": "posts/Projects/CustomizingQuarto/999RandomQuarto/Appendices.html#page-layout",
    "title": "SERIES",
    "section": "Page Layout",
    "text": "Page Layout\nhttps://quarto.org/docs/output-formats/page-layout.html#grid-customization"
  },
  {
    "objectID": "posts/Projects/CustomizingQuarto/999RandomQuarto/Appendices.html#title-blocks",
    "href": "posts/Projects/CustomizingQuarto/999RandomQuarto/Appendices.html#title-blocks",
    "title": "SERIES",
    "section": "Title Blocks",
    "text": "Title Blocks\nhttps://quarto.org/docs/authoring/title-blocks.html#custom-title-pages"
  },
  {
    "objectID": "posts/Projects/CustomizingQuarto/999RandomQuarto/Appendices.html#table-of-contents",
    "href": "posts/Projects/CustomizingQuarto/999RandomQuarto/Appendices.html#table-of-contents",
    "title": "SERIES",
    "section": "Table of Contents",
    "text": "Table of Contents\nhttps://www.reddit.com/r/RStudio/comments/zhrwg3/add_on_this_page_section_to_my_quarto_blog_posts/"
  },
  {
    "objectID": "posts/Projects/CustomizingQuarto/999RandomQuarto/Appendices.html",
    "href": "posts/Projects/CustomizingQuarto/999RandomQuarto/Appendices.html",
    "title": "SERIES",
    "section": "",
    "text": "Just tips and tricks that I’ve found useful in my Quarto projects."
  },
  {
    "objectID": "posts/Projects/CustomizingQuarto/999RandomQuarto/Appendices.html#custom-fields",
    "href": "posts/Projects/CustomizingQuarto/999RandomQuarto/Appendices.html#custom-fields",
    "title": "SERIES",
    "section": "Custom Fields",
    "text": "Custom Fields\n& linking to other posts in the series\n& custom-blank has to have a character in it. It can’t be spaces or &lt;hr&gt; or it will break the listing page."
  },
  {
    "objectID": "posts/Projects/CustomizingQuarto/999RandomQuarto/Appendices.html#article-layout",
    "href": "posts/Projects/CustomizingQuarto/999RandomQuarto/Appendices.html#article-layout",
    "title": "SERIES",
    "section": "Article Layout",
    "text": "Article Layout\nhttps://quarto.org/docs/authoring/article-layout.htm"
  },
  {
    "objectID": "posts/Projects/CustomizingQuarto/999RandomQuarto/Appendices.html#all-fields",
    "href": "posts/Projects/CustomizingQuarto/999RandomQuarto/Appendices.html#all-fields",
    "title": "SERIES",
    "section": "All fields",
    "text": "All fields\nhttps://quarto.org/docs/reference/projects/websites.html"
  },
  {
    "objectID": "posts/Projects/CustomizingQuarto/99RandomQuarto/Appendices.html",
    "href": "posts/Projects/CustomizingQuarto/99RandomQuarto/Appendices.html",
    "title": "SERIES",
    "section": "",
    "text": "Just tips and tricks that I’ve found useful in my Quarto projects."
  },
  {
    "objectID": "posts/Projects/CustomizingQuarto/99RandomQuarto/Appendices.html#custom-fields",
    "href": "posts/Projects/CustomizingQuarto/99RandomQuarto/Appendices.html#custom-fields",
    "title": "SERIES",
    "section": "Custom Fields",
    "text": "Custom Fields\n& linking to other posts in the series\n& custom-blank has to have a character in it. It can’t be spaces or &lt;hr&gt; or it will break the listing page."
  },
  {
    "objectID": "posts/Projects/CustomizingQuarto/99RandomQuarto/Appendices.html#code-annotation",
    "href": "posts/Projects/CustomizingQuarto/99RandomQuarto/Appendices.html#code-annotation",
    "title": "SERIES",
    "section": "Code Annotation",
    "text": "Code Annotation\nhttps://quarto.org/docs/authoring/code-annotation.html\n1def hello(name:str):\n2    greeting = f\"👋 hello {name}!\"\n    return greeting\n\n1\n\nThis is a function that says hello\n\n2\n\nThis is the greeting"
  },
  {
    "objectID": "posts/Projects/CustomizingQuarto/99RandomQuarto/Appendices.html#includes",
    "href": "posts/Projects/CustomizingQuarto/99RandomQuarto/Appendices.html#includes",
    "title": "SERIES",
    "section": "Includes",
    "text": "Includes\nhttps://quarto.org/docs/authoring/includes.html"
  },
  {
    "objectID": "posts/Projects/CustomizingQuarto/99RandomQuarto/Appendices.html#dark-mode",
    "href": "posts/Projects/CustomizingQuarto/99RandomQuarto/Appendices.html#dark-mode",
    "title": "SERIES",
    "section": "Dark Mode",
    "text": "Dark Mode\nhttps://quarto.org/docs/websites/website-tools.html#dark-mode"
  },
  {
    "objectID": "posts/Projects/CustomizingQuarto/99RandomQuarto/Appendices.html#page-layout",
    "href": "posts/Projects/CustomizingQuarto/99RandomQuarto/Appendices.html#page-layout",
    "title": "SERIES",
    "section": "Page Layout",
    "text": "Page Layout\nhttps://quarto.org/docs/output-formats/page-layout.html#grid-customization"
  },
  {
    "objectID": "posts/Projects/CustomizingQuarto/99RandomQuarto/Appendices.html#title-blocks",
    "href": "posts/Projects/CustomizingQuarto/99RandomQuarto/Appendices.html#title-blocks",
    "title": "SERIES",
    "section": "Title Blocks",
    "text": "Title Blocks\nhttps://quarto.org/docs/authoring/title-blocks.html#custom-title-pages"
  },
  {
    "objectID": "posts/Projects/CustomizingQuarto/99RandomQuarto/Appendices.html#table-of-contents",
    "href": "posts/Projects/CustomizingQuarto/99RandomQuarto/Appendices.html#table-of-contents",
    "title": "SERIES",
    "section": "Table of Contents",
    "text": "Table of Contents\nhttps://www.reddit.com/r/RStudio/comments/zhrwg3/add_on_this_page_section_to_my_quarto_blog_posts/"
  },
  {
    "objectID": "posts/Projects/CustomizingQuarto/99RandomQuarto/Appendices.html#article-layout",
    "href": "posts/Projects/CustomizingQuarto/99RandomQuarto/Appendices.html#article-layout",
    "title": "SERIES",
    "section": "Article Layout",
    "text": "Article Layout\nhttps://quarto.org/docs/authoring/article-layout.htm"
  },
  {
    "objectID": "posts/Projects/CustomizingQuarto/99RandomQuarto/Appendices.html#all-fields",
    "href": "posts/Projects/CustomizingQuarto/99RandomQuarto/Appendices.html#all-fields",
    "title": "SERIES",
    "section": "All fields",
    "text": "All fields\nhttps://quarto.org/docs/reference/projects/websites.html"
  },
  {
    "objectID": "posts/notion_api/notino_api.html",
    "href": "posts/notion_api/notino_api.html",
    "title": "Notion API: Querying and Updating Databases with Python",
    "section": "",
    "text": "I used this tutorial for reference pt1 https://www.youtube.com/watch?v=SCqRkHFsAzM & pt2 https://www.youtube.com/watch?v=Lvrc7YfHd8E\n(property_types)[https://developers.notion.com/reference/property-object]\nhttps://www.blef.fr/upload-data-to-notion/\nadd pages in database https://developers.notion.com/reference/post-page\nupdate pages in database https://developers.notion.com/reference/patch-page\n(python tutorial)[https://www.python-engineer.com/posts/notion-api-python/]\n\nmake integration key\nconnect integration to database (https://stackoverflow.com/questions/74084892/how-can-i-connect-the-notion-integration-to-the-specific-notion-page)\ncopy link\nversioning https://developers.notion.com/reference/versioning"
  },
  {
    "objectID": "posts/notion_api/notion_api.html",
    "href": "posts/notion_api/notion_api.html",
    "title": "Notion API: Querying and Updating Databases with Python",
    "section": "",
    "text": "“Notion is a single space where you can think, write, and plan. Capture thoughts, manage projects, or even run an entire company — and do it exactly the way you want.” 1 I have personally been using Notion for the past 3 years. I used notion to keep track of my work hours, my to-do list, and all of my classes in the back half of college.\nYou keep track of everything through databases of pages, and you can join databases together and create different views to really unlock Notion’s full potential.\n\n\nI use notion to store all of my recipies, and I’m constantly updating my recipe database. But putting in all 10 properties for every new entry is my least favorite part. So I wanted to create a web scrapper that would take the recipe link, scrape all the info, and automatically upload it to Notion.\nLuckily, Notion has an API that lets you query databases, create new pages and update existing pages. Unluckily, all of the examples are written in JavaScript and Shell, and all of the python packages I could find were unintuitive. So here is a very basic tutorial from my adventure using the Notion API."
  },
  {
    "objectID": "posts/notion_api/notion_api.html#notion-integrations",
    "href": "posts/notion_api/notion_api.html#notion-integrations",
    "title": "Notion API: Querying and Updating Databases with Python",
    "section": "1. Notion Integrations",
    "text": "1. Notion Integrations"
  },
  {
    "objectID": "posts/notion_api/notion_api.html#footnotes",
    "href": "posts/notion_api/notion_api.html#footnotes",
    "title": "Notion API: Querying and Updating Databases with Python",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nhttps://www.notion.so/help/guides/what-is-notion↩︎"
  },
  {
    "objectID": "posts/notion_api/notion_api.html#why-use-the-notion-api",
    "href": "posts/notion_api/notion_api.html#why-use-the-notion-api",
    "title": "Notion API: Querying and Updating Databases with Python",
    "section": "",
    "text": "I use notion to store all of my recipies, and I’m constantly updating my recipe database. But putting in all 10 properties for every new entry is my least favorite part. So I wanted to create a web scrapper that would take the recipe link, scrape all the info, and automatically upload it to Notion.\nLuckily, Notion has an API that lets you query databases, create new pages and update existing pages. Unluckily, all of the examples are written in JavaScript and Shell, and all of the python packages I could find were unintuitive. So here is a very basic tutorial from my adventure using the Notion API."
  },
  {
    "objectID": "posts/notion_api/notion_api.html#filter-sorts",
    "href": "posts/notion_api/notion_api.html#filter-sorts",
    "title": "Notion API: Querying and Updating Databases with Python",
    "section": "Filter & Sorts",
    "text": "Filter & Sorts\nFiltering docs\nYou can also include a filter in your payload. These differ from property type to property type, and may take some trial and error. Sorting can also be added to return everything in\npayload = {\n    \"page_size\": page_size,\n    \"filter\": {\n        \"or\": [\n            {\"property\": \"Status\", \"status\": {\"does_not_equal\": \"Done\"}},\n            {\"property\": \"Tags\", \"multi_select\": {\"contains\": \"Improvement\"}},\n        ]\n    },\n    \"sorts\": [{\"property\": \"Due\", \"direction\": \"ascending\"}],\n}"
  },
  {
    "objectID": "posts/notion_api/notion_api.html#properties",
    "href": "posts/notion_api/notion_api.html#properties",
    "title": "Notion API: Querying and Updating Databases with Python",
    "section": "Properties",
    "text": "Properties\nThese can be a bit finicky to get working. These are the types that I’ve got working so far. They go inside the properties: {} dictionary in the payload.\n\n\n\n\n\n\n\n\nType\nCode\nNote\n\n\n\n\ncheckbox\n \"p_name\": {\"checkbox\": true}\naccepts a bool (True/False)\n\n\ndate\n\"p_name\": {\n    \"date\": {\n        \"start\": datetime(2023, 5, 29).isoformat(),\n        \"end\": None,\n    }\n}\nrequires from datetime import datetime, timezone\n\n\nmulti-select\n\"p_name\": {\"multi_select\": [{\"name\": val}]}\naccepts a list of named vals to select. If val doesn’t exist it will be created.\n\n\nnumber\n\"p_name\": {\"number\": num}\n\n\n\nrelation\n\"p_name\": {\"relation\": [{\"id\": page_id, \"name\": page_name}]}\nrequires relation database to have integration and get the related page’s id\n\n\nrich_text\n\"p_name\": {\"rich_text\": [{\"text\": {\"content\": text}}]}\n\n\n\nselect\n\"p_name\": {\"select\": {\"name\": val}}\nlike multiselect, if val doesn’t exist it will be created\n\n\nstatus\n\"p_name\": {\"status\": {\"name\": val}}\nlike multiselect but value must exist\n\n\n\nProperty docs"
  },
  {
    "objectID": "posts/Public/notion_api/notion_api.html",
    "href": "posts/Public/notion_api/notion_api.html",
    "title": "Notion API",
    "section": "",
    "text": "“Notion is a single space where you can think, write, and plan. Capture thoughts, manage projects, or even run an entire company — and do it exactly the way you want.” 1 I have personally been using Notion for the past 3 years. I used notion to keep track of my work hours, my to-do list, and all of my classes in the back half of college.\nYou keep track of everything through databases of pages, and you can join databases together and create different views to really unlock Notion’s full potential.\n\n\nI use notion to store all of my recipies, and I’m constantly updating my recipe database. But putting in all 10 properties for every new entry is my least favorite part. So I wanted to create a web scrapper that would take the recipe link, scrape all the info, and automatically upload it to Notion.\nLuckily, Notion has an API that lets you query databases, create new pages and update existing pages. Unluckily, all of the examples are written in JavaScript and Shell, and all of the python packages I could find were unintuitive. So here is a very basic tutorial from my adventure using the Notion API."
  },
  {
    "objectID": "posts/Public/notion_api/notion_api.html#why-use-the-notion-api",
    "href": "posts/Public/notion_api/notion_api.html#why-use-the-notion-api",
    "title": "Notion API",
    "section": "",
    "text": "I use notion to store all of my recipies, and I’m constantly updating my recipe database. But putting in all 10 properties for every new entry is my least favorite part. So I wanted to create a web scrapper that would take the recipe link, scrape all the info, and automatically upload it to Notion.\nLuckily, Notion has an API that lets you query databases, create new pages and update existing pages. Unluckily, all of the examples are written in JavaScript and Shell, and all of the python packages I could find were unintuitive. So here is a very basic tutorial from my adventure using the Notion API."
  },
  {
    "objectID": "posts/Public/notion_api/notion_api.html#filter-sorts",
    "href": "posts/Public/notion_api/notion_api.html#filter-sorts",
    "title": "Notion API",
    "section": "Filter & Sorts",
    "text": "Filter & Sorts\nFiltering docs\nYou can also include a filter in your payload. These differ from property type to property type, and may take some trial and error. Sorting can also be added to return everything in\npayload = {\n    \"page_size\": page_size,\n    \"filter\": {\n        \"or\": [\n            {\"property\": \"Status\", \"status\": {\"does_not_equal\": \"Done\"}},\n            {\"property\": \"Tags\", \"multi_select\": {\"contains\": \"Improvement\"}},\n        ]\n    },\n    \"sorts\": [{\"property\": \"Due\", \"direction\": \"ascending\"}],\n}"
  },
  {
    "objectID": "posts/Public/notion_api/notion_api.html#properties",
    "href": "posts/Public/notion_api/notion_api.html#properties",
    "title": "Notion API",
    "section": "Properties",
    "text": "Properties\nProperty docs\nThese can be a bit finicky to get working. These are the types that I’ve got working so far. They go inside the properties: {} dictionary in the payload.\n\n\n\n\n\n\n\n\nType\nCode\nNote\n\n\n\n\ncheckbox\n \"p_name\": {\"checkbox\": bool}\naccepts a bool (True/False)\n\n\ndate\n\"p_name\": {\n    \"date\": {\n        \"start\": datetime(2023, 5, 29).isoformat(),\n        \"end\": None,\n    }\n}\nrequires from datetime import datetime, timezone\n\n\nmulti-select\n\"p_name\": {\"multi_select\": [{\"name\": val}]}\naccepts a list of named vals to select. If val doesn’t exist it will be created.\n\n\nnumber\n\"p_name\": {\"number\": num}\n\n\n\nrelation\n\"p_name\": {\"relation\": [{\"id\": page_id, \"name\": page_name}]}\nrequires relation database to have integration and get the related page’s id\n\n\nrich_text\n\"p_name\": {\"rich_text\": [{\"text\": {\"content\": text}}]}\n\n\n\nselect\n\"p_name\": {\"select\": {\"name\": val}}\nlike multiselect, if val doesn’t exist it will be created\n\n\nstatus\n\"p_name\": {\"status\": {\"name\": val}}\nlike multiselect but value must exist"
  },
  {
    "objectID": "posts/Public/notion_api/notion_api.html#footnotes",
    "href": "posts/Public/notion_api/notion_api.html#footnotes",
    "title": "Notion API",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nhttps://www.notion.so/help/guides/what-is-notion↩︎"
  },
  {
    "objectID": "posts/webscrapping.py/webscrapping_basics.html",
    "href": "posts/webscrapping.py/webscrapping_basics.html",
    "title": "Webscrapping for Dummies",
    "section": "",
    "text": "Web scraping is the process of extracting data from websites. It is a form of copying, in which specific data is gathered and copied from the web, typically into a central local database or spreadsheet for later retrieval or analysis.\n\n\n\nWeb scraping is a powerful tool for data scientists, analysts, and anyone else who wants to analyze large amounts of data. It can be used to gather data from a variety of sources, including social media sites, news sites, and blogs. Web scraping is also useful for gathering data from websites that are not easily accessible through other means, such as government websites or private databases."
  },
  {
    "objectID": "posts/webscrapping.py/webscrapping_basics.html#what-is-web-scraping",
    "href": "posts/webscrapping.py/webscrapping_basics.html#what-is-web-scraping",
    "title": "Webscrapping for Dummies",
    "section": "",
    "text": "Web scraping is the process of extracting data from websites. It is a form of copying, in which specific data is gathered and copied from the web, typically into a central local database or spreadsheet for later retrieval or analysis."
  },
  {
    "objectID": "posts/webscrapping.py/webscrapping_basics.html#why-web-scraping",
    "href": "posts/webscrapping.py/webscrapping_basics.html#why-web-scraping",
    "title": "Webscrapping for Dummies",
    "section": "",
    "text": "Web scraping is a powerful tool for data scientists, analysts, and anyone else who wants to analyze large amounts of data. It can be used to gather data from a variety of sources, including social media sites, news sites, and blogs. Web scraping is also useful for gathering data from websites that are not easily accessible through other means, such as government websites or private databases."
  },
  {
    "objectID": "posts/Projects/temperature_blanket/1WeatherAPI/WeatherAPI.html",
    "href": "posts/Projects/temperature_blanket/1WeatherAPI/WeatherAPI.html",
    "title": "Open Metro API",
    "section": "",
    "text": "Introduction\nThe Open Metro API is a free API that provides weather data for anywhere around the world. The API provides current weather data, as well as historical data. The API is free to use for non commercial use.\n\n\nGetting Started"
  },
  {
    "objectID": "posts/Projects/temperature_blanket/1WeatherAPI/WeatherAPI.html#introduction",
    "href": "posts/Projects/temperature_blanket/1WeatherAPI/WeatherAPI.html#introduction",
    "title": "Open Metro API",
    "section": "",
    "text": "This project is a Python wrapper for the Open Metro API. The Open Metro API is a RESTful API that provides real-time information about the Washington Metropolitan Area Transit Authority (WMATA) system. The API provides information about the Metrorail, Metrobus, and MetroAlerts."
  },
  {
    "objectID": "posts/Projects/temperature_blanket/TemperatureBlanket_project.html",
    "href": "posts/Projects/temperature_blanket/TemperatureBlanket_project.html",
    "title": "Temperature Blanket Generator",
    "section": "",
    "text": "Posts\n\n\n\n\n  \n\n\n\n\nOpen Metro API\n\n\n\n\n\n\n\nPython\n\n\nPandas\n\n\nAPIs\n\n\n\n\n\n\n\n\n\n\n\nAug 30, 2023\n\n\n1 min\n\n\n—\n\n\nPart 1\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "posts/Projects/fair_isle_knitting/fair_isle_knitting_project.html",
    "href": "posts/Projects/fair_isle_knitting/fair_isle_knitting_project.html",
    "title": "Fair Isle Knitting Series",
    "section": "",
    "text": "Posts\n\n\n\n\n  \n\n\n\n\nKnitting with Code: Designing Repeating Pixel Art for Fair Isle Patterns Using Matplotlib and Numpy\n\n\n\n\n\n\n\nPython\n\n\nCode Snippets\n\n\nPandas\n\n\n\n\nHarness the power of Python to create repeating pixel art for Fair Isle patterns using Matplotlib and Numpy.\n\n\n\n\n\n\nMay 17, 2024\n\n\n9 min\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "posts/Projects/fair_isle_knitting/fair_isle_matplotlib/fair_isle_matplotlib.html",
    "href": "posts/Projects/fair_isle_knitting/fair_isle_matplotlib/fair_isle_matplotlib.html",
    "title": "Knitting with Code: Designing Repeating Pixel Art for Fair Isle Patterns Using Matplotlib and Numpy",
    "section": "",
    "text": "Find a pattern you like and then create a numpy array of pixel values to represent the pattern, where 0s are the background and 1s are the color. For example, the following code creates a small flower pattern:\n\nimport math\nimport numpy as np\nimport pandas as pd\n\nsmall_flower_array = np.array(\n    [\n        [0, 0, 1, 1, 0, 0, 0, 0],\n        [1, 1, 1, 1, 0, 2, 2, 0],\n        [1, 1, 0, 1, 1, 0, 2, 2],\n        [0, 1, 1, 1, 1, 0, 0, 0],\n        [0, 1, 1, 0, 0, 0, 0, 0],\n    ]\n)\n\n\n\n\nNow, you can repeat the pixel values to create a larger pattern using the np.tile() function. For example, to create a larger pattern with the small flower array, you can use the following code:\n\n1array_tile = np.tile(small_flower_array, (1, 3))\n\nsmall_flower_df = pd.DataFrame(array_tile)\n\n\n1\n\nPass the small flower array to the np.tile() function, Set the number of times to repeat the array vertically (1), Set the number of times to repeat the array horizontally (3).\n\n\n\n\n\n\n\nFinally, you can plot the pattern using Matplotlib. For example, to plot the small flower pattern, you can use the following code:\n\nimport matplotlib.pyplot as plt\n\nfig, ax = plt.subplots()\nax.imshow(\n    small_flower_df,\n)\n\nplt.show(fig)\n\n\n\n\nTada! You have created a repeating pixel art pattern using Matplotlib and Numpy. But if you’re looking at this as a knitter, you may notice a few things off:\n\nAll the flowers are touching. In knitting, you’d want a bit of space between the flowers.\nThe colors are not what you’d expect. In knitting, you’d expect the background to be white and the pattern to be black, and the third color to be gray.\nthe Y-axis is inverted. This is because the origin (0, 0) is at the top left corner in Matplotlib, but in most things (including knitting), the origin is at the bottom left corner. To read the chart correctly, you’d want the y axis to be inverted so it reads from bottom to top.\n\n\n\n\n\n\n\nNote\n\n\n\nIf you’re a right-handed knitter, you’d want the x axis to be inverted as well. This is because knitting charts are typically read from right to left.\n\n\n\nA knitting pattern is rarely just one row. You’d want to repeat the pattern multiple times to see how it looks over multiple rows, and add multiple patterns to spice up the design.\n\nLet’s fix these issues in the next section."
  },
  {
    "objectID": "posts/Projects/fair_isle_knitting/fair_isle_matplotlib/fair_isle_matplotlib.html#create-a-numpy-array-of-pixel-values",
    "href": "posts/Projects/fair_isle_knitting/fair_isle_matplotlib/fair_isle_matplotlib.html#create-a-numpy-array-of-pixel-values",
    "title": "Knitting with Code: Designing Repeating Pixel Art for Fair Isle Patterns Using Matplotlib and Numpy",
    "section": "",
    "text": "Find a pattern you like and then create a numpy array of pixel values to represent the pattern, where 0s are the background and 1s are the color. For example, the following code creates a small flower pattern:\n\nimport math\nimport numpy as np\nimport pandas as pd\n\nsmall_flower_array = np.array(\n    [\n        [0, 0, 1, 1, 0, 0, 0, 0],\n        [1, 1, 1, 1, 0, 2, 2, 0],\n        [1, 1, 0, 1, 1, 0, 2, 2],\n        [0, 1, 1, 1, 1, 0, 0, 0],\n        [0, 1, 1, 0, 0, 0, 0, 0],\n    ]\n)"
  },
  {
    "objectID": "posts/Projects/fair_isle_knitting/fair_isle_matplotlib/fair_isle_matplotlib.html#repeat-the-pixel-values-to-create-a-pattern-using-tile-function-and-convert-to-a-dataframe",
    "href": "posts/Projects/fair_isle_knitting/fair_isle_matplotlib/fair_isle_matplotlib.html#repeat-the-pixel-values-to-create-a-pattern-using-tile-function-and-convert-to-a-dataframe",
    "title": "Knitting with Code: Designing Repeating Pixel Art for Fair Isle Patterns Using Matplotlib and Numpy",
    "section": "",
    "text": "Now, you can repeat the pixel values to create a larger pattern using the np.tile() function. For example, to create a larger pattern with the small flower array, you can use the following code:\n\n1array_tile = np.tile(small_flower_array, (1, 3))\n\nsmall_flower_df = pd.DataFrame(array_tile)\n\n\n1\n\nPass the small flower array to the np.tile() function, Set the number of times to repeat the array vertically (1), Set the number of times to repeat the array horizontally (3)."
  },
  {
    "objectID": "posts/Projects/fair_isle_knitting/fair_isle_matplotlib/fair_isle_matplotlib.html#plot-the-pattern-using-matplotlib",
    "href": "posts/Projects/fair_isle_knitting/fair_isle_matplotlib/fair_isle_matplotlib.html#plot-the-pattern-using-matplotlib",
    "title": "Knitting with Code: Designing Repeating Pixel Art for Fair Isle Patterns Using Matplotlib and Numpy",
    "section": "",
    "text": "Finally, you can plot the pattern using Matplotlib. For example, to plot the small flower pattern, you can use the following code:\n\nimport matplotlib.pyplot as plt\n\nfig, ax = plt.subplots()\nax.imshow(\n    small_flower_df,\n)\n\nplt.show(fig)\n\n\n\n\nTada! You have created a repeating pixel art pattern using Matplotlib and Numpy. But if you’re looking at this as a knitter, you may notice a few things off:\n\nAll the flowers are touching. In knitting, you’d want a bit of space between the flowers.\nThe colors are not what you’d expect. In knitting, you’d expect the background to be white and the pattern to be black, and the third color to be gray.\nthe Y-axis is inverted. This is because the origin (0, 0) is at the top left corner in Matplotlib, but in most things (including knitting), the origin is at the bottom left corner. To read the chart correctly, you’d want the y axis to be inverted so it reads from bottom to top.\n\n\n\n\n\n\n\nNote\n\n\n\nIf you’re a right-handed knitter, you’d want the x axis to be inverted as well. This is because knitting charts are typically read from right to left.\n\n\n\nA knitting pattern is rarely just one row. You’d want to repeat the pattern multiple times to see how it looks over multiple rows, and add multiple patterns to spice up the design.\n\nLet’s fix these issues in the next section."
  },
  {
    "objectID": "posts/Projects/fair_isle_knitting/fair_isle_matplotlib/fair_isle_matplotlib.html#add-space-between-the-flowers-and-abstract-the-tiling-function",
    "href": "posts/Projects/fair_isle_knitting/fair_isle_matplotlib/fair_isle_matplotlib.html#add-space-between-the-flowers-and-abstract-the-tiling-function",
    "title": "Knitting with Code: Designing Repeating Pixel Art for Fair Isle Patterns Using Matplotlib and Numpy",
    "section": "1. add space between the flowers and abstract the tiling function",
    "text": "1. add space between the flowers and abstract the tiling function\nTo add space between the flowers, you can insert a row and column of zeros between each flower in the array. For example, to add space between the flowers in the small flower array, you can use the following code:\n\nblank_column = np.zeros([len(small_flower_array), 1])\nsmall_flower_array_spaced = np.append(small_flower_array, blank_column, 1) \n\nBut this is a bit manual and not very reusable. Instead, you can create a function that takes an array and the desired length of the pattern and returns the array with the desired length, with a blank column between each repeat.\nThere are a few things to consider when creating this function: - You may not want to add a blank column between each repeat, like in the case of the large flower pattern - You may need to cut off the pattern to fit a desired length - You may want to flip the pattern horizontally to match the way knitting patterns are read\nHere’s a function that does all of this:\n\ndef tile_array(array, desired_length, blank_between=True, cutoff=True):\n\n1    if blank_between:\n        blank_column = np.zeros([len(array), 1])\n        array = np.append(array, blank_column, 1)\n\n    num_repeats = math.ceil(desired_length / array.shape[1])\n    array_tile = np.tile(array, (1, num_repeats))\n\n2    if cutoff:\n        array_tile = array_tile[:, :desired_length]\n\n3    array_return = np.fliplr(array_tile)\n\n    return array_return\n\n\n1\n\nAdd a blank column between each repeat if blank_between is True\n\n2\n\nCut off the pattern to fit the desired length if cutoff is True\n\n3\n\nFlip the pattern horizontally to match the way knitting patterns are read"
  },
  {
    "objectID": "posts/Projects/fair_isle_knitting/fair_isle_matplotlib/fair_isle_matplotlib.html#create-a-color-map-for-matplotlib",
    "href": "posts/Projects/fair_isle_knitting/fair_isle_matplotlib/fair_isle_matplotlib.html#create-a-color-map-for-matplotlib",
    "title": "Knitting with Code: Designing Repeating Pixel Art for Fair Isle Patterns Using Matplotlib and Numpy",
    "section": "2. create a color map for matplotlib",
    "text": "2. create a color map for matplotlib\nIn an ideal world, you would be able to mark explicit colors to the number in the array. But in matplotlib, you can only pass a color map. This is basically just a gradient of colors that matplotlib will use to color the numbers in the array. Luckily, knitting patterns are typically only three colors: the background, the pattern, and a third color for contrast. So you can create a custom color map to match these colors fairly easily.\nYou can create your own color map using the ListedColormap function. You can pass a list of colors to the function, where the first color is the background color (0), the second color is the first color in the pattern (1), and the third color is the second color in the pattern (2). matplotlib colormap manipulation doc 🔗\n\nimport matplotlib.colors as mcolors\n\ncmap_bw = mcolors.ListedColormap([\"white\", \"gray\", \"black\"])\ncmap_rg = mcolors.ListedColormap([\"lightskyblue\", \"firebrick\", \"darkolivegreen\"])\n\nThere are so many colors to choose from in matplotlib. So you can create your own color map to match the colors you want in your pattern. Have fun with it! matplotlib color maps 🔗"
  },
  {
    "objectID": "posts/Projects/fair_isle_knitting/fair_isle_matplotlib/fair_isle_matplotlib.html#plot-the-pattern-using-matplotlib-with-the-color-map-and-inverted-axes",
    "href": "posts/Projects/fair_isle_knitting/fair_isle_matplotlib/fair_isle_matplotlib.html#plot-the-pattern-using-matplotlib-with-the-color-map-and-inverted-axes",
    "title": "Knitting with Code: Designing Repeating Pixel Art for Fair Isle Patterns Using Matplotlib and Numpy",
    "section": "3. plot the pattern using matplotlib with the color map and inverted axes",
    "text": "3. plot the pattern using matplotlib with the color map and inverted axes\nNow you can plot the pattern using Matplotlib with the custom color map. For example, to plot the large flower pattern with the custom color map, you can use the following code:\n\nlarge_flower_df = pd.DataFrame(\n    tile_array(\n        large_flower_array,\n        blank_between=False,\n        desired_length=24,\n        cutoff=True,\n    )\n1).iloc[::-1]\n\nfig, ax = plt.subplots()\nax.imshow(\n    large_flower_df,\n    cmap=cmap_rg,\n    aspect=\"equal\",\n    origin=\"lower\",\n)\n2ax.invert_xaxis()\n\nplt.show(fig)\n\n\n1\n\nFlip the pattern vertically to match the way knitting patterns are read\n\n2\n\nInvert the x-axis to match the way knitting patterns are read"
  },
  {
    "objectID": "posts/Projects/fair_isle_knitting/fair_isle_matplotlib/fair_isle_matplotlib.html#add-multiple-patterns-to-spice-up-the-design",
    "href": "posts/Projects/fair_isle_knitting/fair_isle_matplotlib/fair_isle_matplotlib.html#add-multiple-patterns-to-spice-up-the-design",
    "title": "Knitting with Code: Designing Repeating Pixel Art for Fair Isle Patterns Using Matplotlib and Numpy",
    "section": "4. add multiple patterns to spice up the design",
    "text": "4. add multiple patterns to spice up the design\nYou can add multiple patterns to spice up the design by combining multiple arrays. For example, to create a pattern with both the small and large flower patterns, you can use the following code:\n\ndef combine_patterns(patterns, include_blank=True):\n\n    if include_blank:\n        blank_row = pd.DataFrame([[0] * 24])\n\n        result = []\n        for e in patterns:\n            result.append(e)\n            result.append(blank_row)\n        result.pop()\n\n        return pd.concat(result[::-1], axis=0)\n\n    return pd.concat(patterns[::-1], axis=0)\n\npattern_length = 24\n\nsmall_flower_df = pd.DataFrame(\n    tile_array(\n        small_flower_array,\n        blank_between=True,\n        desired_length=pattern_length,\n        cutoff=True,\n    )\n).iloc[::-1]\n\nlarge_flower_df = pd.DataFrame(\n    tile_array(\n        large_flower_array,\n        blank_between=False,\n        desired_length=pattern_length,\n        cutoff=True,\n    )\n).iloc[::-1]\n\nboth_patterns = combine_patterns([small_flower_df, large_flower_df])\n\nfig, ax = plt.subplots()\nax.imshow(\n    both_patterns,\n    cmap = cmap_rg,\n    aspect=\"equal\",\n    origin=\"lower\",\n)\nax.invert_xaxis()\n\nplt.show(fig)\n\n\n\n\nTada! You have created a repeating pixel art pattern for a Fair Isle pattern using Matplotlib and Numpy. You can now create your own custom patterns and color maps to design beautiful Fair Isle patterns for your knitting projects. Have fun knitting!\nIf you want to get the full code, you can find it on my GitHub repository. GitHub repository 🔗"
  },
  {
    "objectID": "posts/Projects/F1Streamlit/f1_streamlit.html",
    "href": "posts/Projects/F1Streamlit/f1_streamlit.html",
    "title": "F1 Streamlit App",
    "section": "",
    "text": "Posts\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "posts/Projects/F1Streamlit/1_f1_api/f1_code/f1_get_season_code.html",
    "href": "posts/Projects/F1Streamlit/1_f1_api/f1_code/f1_get_season_code.html",
    "title": "allisonbday.github.io",
    "section": "",
    "text": "import fastf1\nfrom fastf1.ergast import Ergast\n\nimport pandas as pd\n\n\nergast = Ergast()"
  },
  {
    "objectID": "posts/Projects/F1Streamlit/PROJECT_PAGE_f1_streamlit.html",
    "href": "posts/Projects/F1Streamlit/PROJECT_PAGE_f1_streamlit.html",
    "title": "F1 Streamlit App",
    "section": "",
    "text": "Posts\n\n\n\n\n  \n\n\n\n\nF1 API - Season Data\n\n\n\n\n\n\n\nPython\n\n\nJupyter Notebooks\n\n\nCode Snippets\n\n\nPandas\n\n\nAPIs\n\n\nJSON\n\n\n\n\n\n\n\n\n\n\n\nAug 31, 2024\n\n\n4 min\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "posts/Projects/F1Streamlit/1_f1_api/f1_api.html",
    "href": "posts/Projects/F1Streamlit/1_f1_api/f1_api.html",
    "title": "F1 API - Season Data",
    "section": "",
    "text": "There are a few different F1 APIs available, but I found the one from Ergast to be the most comprehensive. The Ergast API provides a lot of data, including information on drivers, constructors, circuits, ect. In this post, I will show yo\nu how to use the Ergast API to get data on the 2021 F1 season."
  },
  {
    "objectID": "posts/Projects/F1Streamlit/1_f1_api/f1_api.html#getting-started",
    "href": "posts/Projects/F1Streamlit/1_f1_api/f1_api.html#getting-started",
    "title": "F1 API - Season Data",
    "section": "Getting Started",
    "text": "Getting Started\nTo get started, you will need to install the fastf1 library. You can do this by running the following command in your terminal:\npip install fastf1"
  },
  {
    "objectID": "posts/Projects/F1Streamlit/1_f1_api/f1_api.html#importing-libraries",
    "href": "posts/Projects/F1Streamlit/1_f1_api/f1_api.html#importing-libraries",
    "title": "F1 API - Season Data",
    "section": "Importing Libraries",
    "text": "Importing Libraries\nFirst, we need to import the libraries we will be using. In this case, we will be using the fastf1 library to get the data from the Ergast API and the pandas library to work with the data.\n\nimport fastf1\nfrom fastf1.ergast import Ergast\n\nimport pandas as pd"
  },
  {
    "objectID": "posts/Projects/F1Streamlit/1_f1_api/f1_api.html#getting-the-data",
    "href": "posts/Projects/F1Streamlit/1_f1_api/f1_api.html#getting-the-data",
    "title": "F1 API - Season Data",
    "section": "Getting the Data",
    "text": "Getting the Data\nThere are a few different tables we need to pull from to get the data we want. The main tables we will be using are the race schedule, the sessions, and the drivers. We will start by getting the race schedule data.\n\nRace Schedule\nThe first table we will pull from is the Race Schedule. This table contains information on all the races that took place during the 2021 season, including the date, name, and location of each race.\nIn order to collect this data, we need to use the Ergast API. To see the documentation, you can go here Ergast API.\nFirst, we need to initialize Ergast to get the data from the API. We can do this by running the following code:\nThere are a lot of parameters you can pass to the API, but for now, we will just pass the year 2021 to get the data for that season.\nergast = Ergast()\n\nraces = ergast.get_race_schedule(2021)\n\nraces = pd.read_csv(\"data/races.csv\")\nraces\n\n\n\n\n\n\n\n\nseason\nround\nraceUrl\nraceName\nraceDate\nraceTime\ncircuitId\ncircuitUrl\ncircuitName\nlat\nlong\nlocality\ncountry\nfp1Date\nfp2Date\nfp3Date\nqualifyingDate\nsprintDate\n\n\n\n\n0\n2021\n1\nhttp://en.wikipedia.org/wiki/2021_Bahrain_Gran...\nBahrain Grand Prix\n2021-03-28\n15:00:00+00:00\nbahrain\nhttp://en.wikipedia.org/wiki/Bahrain_Internati...\nBahrain International Circuit\n26.0325\n50.51060\nSakhir\nBahrain\n2021-03-26\n2021-03-26\n2021-03-27\n2021-03-27\nNaN\n\n\n1\n2021\n2\nhttp://en.wikipedia.org/wiki/2021_Emilia_Romag...\nEmilia Romagna Grand Prix\n2021-04-18\n13:00:00+00:00\nimola\nhttp://en.wikipedia.org/wiki/Autodromo_Enzo_e_...\nAutodromo Enzo e Dino Ferrari\n44.3439\n11.71670\nImola\nItaly\n2021-04-16\n2021-04-16\n2021-04-17\n2021-04-17\nNaN\n\n\n2\n2021\n3\nhttp://en.wikipedia.org/wiki/2021_Portuguese_G...\nPortuguese Grand Prix\n2021-05-02\n14:00:00+00:00\nportimao\nhttp://en.wikipedia.org/wiki/Algarve_Internati...\nAutódromo Internacional do Algarve\n37.2270\n-8.62670\nPortimão\nPortugal\n2021-04-30\n2021-04-30\n2021-05-01\n2021-05-01\nNaN\n\n\n3\n2021\n4\nhttp://en.wikipedia.org/wiki/2021_Spanish_Gran...\nSpanish Grand Prix\n2021-05-09\n13:00:00+00:00\ncatalunya\nhttp://en.wikipedia.org/wiki/Circuit_de_Barcel...\nCircuit de Barcelona-Catalunya\n41.5700\n2.26111\nMontmeló\nSpain\n2021-05-07\n2021-05-07\n2021-05-08\n2021-05-08\nNaN\n\n\n4\n2021\n5\nhttp://en.wikipedia.org/wiki/2021_Monaco_Grand...\nMonaco Grand Prix\n2021-05-23\n13:00:00+00:00\nmonaco\nhttp://en.wikipedia.org/wiki/Circuit_de_Monaco\nCircuit de Monaco\n43.7347\n7.42056\nMonte-Carlo\nMonaco\n2021-05-21\n2021-05-21\n2021-05-22\n2021-05-22\nNaN\n\n\n5\n2021\n6\nhttp://en.wikipedia.org/wiki/2021_Azerbaijan_G...\nAzerbaijan Grand Prix\n2021-06-06\n12:00:00+00:00\nbaku\nhttp://en.wikipedia.org/wiki/Baku_City_Circuit\nBaku City Circuit\n40.3725\n49.85330\nBaku\nAzerbaijan\n2021-06-04\n2021-06-04\n2021-06-05\n2021-06-05\nNaN\n\n\n6\n2021\n7\nhttp://en.wikipedia.org/wiki/2021_French_Grand...\nFrench Grand Prix\n2021-06-20\n13:00:00+00:00\nricard\nhttp://en.wikipedia.org/wiki/Paul_Ricard_Circuit\nCircuit Paul Ricard\n43.2506\n5.79167\nLe Castellet\nFrance\n2021-06-18\n2021-06-18\n2021-06-19\n2021-06-19\nNaN\n\n\n7\n2021\n8\nhttp://en.wikipedia.org/wiki/2021_Styrian_Gran...\nStyrian Grand Prix\n2021-06-27\n13:00:00+00:00\nred_bull_ring\nhttp://en.wikipedia.org/wiki/Red_Bull_Ring\nRed Bull Ring\n47.2197\n14.76470\nSpielberg\nAustria\n2021-06-25\n2021-06-25\n2021-06-26\n2021-06-26\nNaN\n\n\n8\n2021\n9\nhttp://en.wikipedia.org/wiki/2021_Austrian_Gra...\nAustrian Grand Prix\n2021-07-04\n13:00:00+00:00\nred_bull_ring\nhttp://en.wikipedia.org/wiki/Red_Bull_Ring\nRed Bull Ring\n47.2197\n14.76470\nSpielberg\nAustria\n2021-07-02\n2021-07-02\n2021-07-03\n2021-07-03\nNaN\n\n\n9\n2021\n10\nhttp://en.wikipedia.org/wiki/2021_British_Gran...\nBritish Grand Prix\n2021-07-18\n14:00:00+00:00\nsilverstone\nhttp://en.wikipedia.org/wiki/Silverstone_Circuit\nSilverstone Circuit\n52.0786\n-1.01694\nSilverstone\nUK\n2021-07-16\n2021-07-17\nNaN\n2021-07-16\n2021-07-17\n\n\n10\n2021\n11\nhttp://en.wikipedia.org/wiki/2021_Hungarian_Gr...\nHungarian Grand Prix\n2021-08-01\n13:00:00+00:00\nhungaroring\nhttp://en.wikipedia.org/wiki/Hungaroring\nHungaroring\n47.5789\n19.24860\nBudapest\nHungary\n2021-07-30\n2021-07-30\n2021-07-31\n2021-07-31\nNaN\n\n\n11\n2021\n12\nhttp://en.wikipedia.org/wiki/2021_Belgian_Gran...\nBelgian Grand Prix\n2021-08-29\n13:00:00+00:00\nspa\nhttp://en.wikipedia.org/wiki/Circuit_de_Spa-Fr...\nCircuit de Spa-Francorchamps\n50.4372\n5.97139\nSpa\nBelgium\n2021-08-27\n2021-08-27\n2021-08-28\n2021-08-28\nNaN\n\n\n12\n2021\n13\nhttp://en.wikipedia.org/wiki/2021_Dutch_Grand_...\nDutch Grand Prix\n2021-09-05\n13:00:00+00:00\nzandvoort\nhttp://en.wikipedia.org/wiki/Circuit_Zandvoort\nCircuit Park Zandvoort\n52.3888\n4.54092\nZandvoort\nNetherlands\n2021-09-03\n2021-09-03\n2021-09-04\n2021-09-04\nNaN\n\n\n13\n2021\n14\nhttp://en.wikipedia.org/wiki/2021_Italian_Gran...\nItalian Grand Prix\n2021-09-12\n13:00:00+00:00\nmonza\nhttp://en.wikipedia.org/wiki/Autodromo_Naziona...\nAutodromo Nazionale di Monza\n45.6156\n9.28111\nMonza\nItaly\n2021-09-10\n2021-09-11\nNaN\n2021-09-10\n2021-09-11\n\n\n14\n2021\n15\nhttp://en.wikipedia.org/wiki/2021_Russian_Gran...\nRussian Grand Prix\n2021-09-26\n12:00:00+00:00\nsochi\nhttp://en.wikipedia.org/wiki/Sochi_Autodrom\nSochi Autodrom\n43.4057\n39.95780\nSochi\nRussia\n2021-09-24\n2021-09-24\n2021-09-25\n2021-09-25\nNaN\n\n\n15\n2021\n16\nhttp://en.wikipedia.org/wiki/2021_Turkish_Gran...\nTurkish Grand Prix\n2021-10-10\n12:00:00+00:00\nistanbul\nhttp://en.wikipedia.org/wiki/Istanbul_Park\nIstanbul Park\n40.9517\n29.40500\nIstanbul\nTurkey\n2021-10-08\n2021-10-08\n2021-10-09\n2021-10-09\nNaN\n\n\n16\n2021\n17\nhttp://en.wikipedia.org/wiki/2021_United_State...\nUnited States Grand Prix\n2021-10-24\n19:00:00+00:00\namericas\nhttp://en.wikipedia.org/wiki/Circuit_of_the_Am...\nCircuit of the Americas\n30.1328\n-97.64110\nAustin\nUSA\n2021-10-22\n2021-10-22\n2021-10-23\n2021-10-23\nNaN\n\n\n17\n2021\n18\nhttp://en.wikipedia.org/wiki/2021_Mexican_Gran...\nMexico City Grand Prix\n2021-11-07\n19:00:00+00:00\nrodriguez\nhttp://en.wikipedia.org/wiki/Aut%C3%B3dromo_He...\nAutódromo Hermanos Rodríguez\n19.4042\n-99.09070\nMexico City\nMexico\n2021-11-05\n2021-11-05\n2021-11-06\n2021-11-06\nNaN\n\n\n18\n2021\n19\nhttp://en.wikipedia.org/wiki/2021_S%C3%A3o_Pau...\nSão Paulo Grand Prix\n2021-11-14\n17:00:00+00:00\ninterlagos\nhttp://en.wikipedia.org/wiki/Aut%C3%B3dromo_Jo...\nAutódromo José Carlos Pace\n-23.7036\n-46.69970\nSão Paulo\nBrazil\n2021-11-12\n2021-11-13\nNaN\n2021-11-12\n2021-11-13\n\n\n19\n2021\n20\nhttp://en.wikipedia.org/wiki/2021_Qatar_Grand_...\nQatar Grand Prix\n2021-11-21\n14:00:00+00:00\nlosail\nhttp://en.wikipedia.org/wiki/Losail_Internatio...\nLosail International Circuit\n25.4900\n51.45420\nAl Daayen\nQatar\n2021-11-19\n2021-11-19\n2021-11-20\n2021-11-20\nNaN\n\n\n20\n2021\n21\nhttp://en.wikipedia.org/wiki/2021_Saudi_Arabia...\nSaudi Arabian Grand Prix\n2021-12-05\n17:30:00+00:00\njeddah\nhttp://en.wikipedia.org/wiki/Jeddah_Street_Cir...\nJeddah Corniche Circuit\n21.6319\n39.10440\nJeddah\nSaudi Arabia\n2021-12-03\n2021-12-03\n2021-12-04\n2021-12-04\nNaN\n\n\n21\n2021\n22\nhttp://en.wikipedia.org/wiki/2021_Abu_Dhabi_Gr...\nAbu Dhabi Grand Prix\n2021-12-12\n13:00:00+00:00\nyas_marina\nhttp://en.wikipedia.org/wiki/Yas_Marina_Circuit\nYas Marina Circuit\n24.4672\n54.60310\nAbu Dhabi\nUAE\n2021-12-10\n2021-12-10\n2021-12-11\n2021-12-11\nNaN\n\n\n\n\n\n\n\n\n\nRace Results\nThe next table we want to pull from is the sessions. This table contains information on all the sessions that took place during the 2021 season, including the session type, date, and location of each session.\nWe are going to use the fastf1 library to get the data from the API. Here is the documentation for the fastf1 library fastf1.\nIn order to get the session data, we need to pass the year 2021, the race name, and the session type to the API.\nsession = fastf1.get_session(2021, 'Bahrain', \"R\")\nsession.load()\n\nsession_results = session.results\nsession_results\n\nsession_results = pd.read_csv(\"data/session_results.csv\")\nsession_results\n\n\n\n\n\n\n\n\nDriverNumber\nBroadcastName\nAbbreviation\nDriverId\nTeamName\nTeamColor\nTeamId\nFirstName\nLastName\nFullName\n...\nCountryCode\nPosition\nClassifiedPosition\nGridPosition\nQ1\nQ2\nQ3\nTime\nStatus\nPoints\n\n\n\n\n0\n44\nL HAMILTON\nHAM\nhamilton\nMercedes\n00D2BE\nmercedes\nLewis\nHamilton\nLewis Hamilton\n...\nNaN\n1.0\n1\n2.0\nNaN\nNaN\nNaN\n0 days 01:32:03.897000\nFinished\n25.0\n\n\n1\n33\nM VERSTAPPEN\nVER\nmax_verstappen\nRed Bull Racing\n0600EF\nred_bull\nMax\nVerstappen\nMax Verstappen\n...\nNaN\n2.0\n2\n1.0\nNaN\nNaN\nNaN\n0 days 00:00:00.745000\nFinished\n18.0\n\n\n2\n77\nV BOTTAS\nBOT\nbottas\nMercedes\n00D2BE\nmercedes\nValtteri\nBottas\nValtteri Bottas\n...\nNaN\n3.0\n3\n3.0\nNaN\nNaN\nNaN\n0 days 00:00:37.383000\nFinished\n16.0\n\n\n3\n4\nL NORRIS\nNOR\nnorris\nMcLaren\nFF9800\nmclaren\nLando\nNorris\nLando Norris\n...\nNaN\n4.0\n4\n7.0\nNaN\nNaN\nNaN\n0 days 00:00:46.466000\nFinished\n12.0\n\n\n4\n11\nS PEREZ\nPER\nperez\nRed Bull Racing\n0600EF\nred_bull\nSergio\nPerez\nSergio Perez\n...\nNaN\n5.0\n5\n0.0\nNaN\nNaN\nNaN\n0 days 00:00:52.047000\nFinished\n10.0\n\n\n5\n16\nC LECLERC\nLEC\nleclerc\nFerrari\nDC0004\nferrari\nCharles\nLeclerc\nCharles Leclerc\n...\nNaN\n6.0\n6\n4.0\nNaN\nNaN\nNaN\n0 days 00:00:59.090000\nFinished\n8.0\n\n\n6\n3\nD RICCIARDO\nRIC\nricciardo\nMcLaren\nFF9800\nmclaren\nDaniel\nRicciardo\nDaniel Ricciardo\n...\nNaN\n7.0\n7\n6.0\nNaN\nNaN\nNaN\nNaN\nFinished\n6.0\n\n\n7\n55\nC SAINZ\nSAI\nsainz\nFerrari\nDC0004\nferrari\nCarlos\nSainz\nCarlos Sainz\n...\nNaN\n8.0\n8\n8.0\nNaN\nNaN\nNaN\nNaN\nFinished\n4.0\n\n\n8\n22\nY TSUNODA\nTSU\ntsunoda\nAlphaTauri\n2B4562\nalphatauri\nYuki\nTsunoda\nYuki Tsunoda\n...\nNaN\n9.0\n9\n13.0\nNaN\nNaN\nNaN\nNaN\nFinished\n2.0\n\n\n9\n18\nL STROLL\nSTR\nstroll\nAston Martin\n006F62\naston_martin\nLance\nStroll\nLance Stroll\n...\nNaN\n10.0\n10\n10.0\nNaN\nNaN\nNaN\nNaN\nFinished\n1.0\n\n\n10\n7\nK RAIKKONEN\nRAI\nraikkonen\nAlfa Romeo Racing\n900000\nalfa\nKimi\nRäikkönen\nKimi Räikkönen\n...\nNaN\n11.0\n11\n14.0\nNaN\nNaN\nNaN\nNaN\nFinished\n0.0\n\n\n11\n99\nA GIOVINAZZI\nGIO\ngiovinazzi\nAlfa Romeo Racing\n900000\nalfa\nAntonio\nGiovinazzi\nAntonio Giovinazzi\n...\nNaN\n12.0\n12\n12.0\nNaN\nNaN\nNaN\nNaN\n+1 Lap\n0.0\n\n\n12\n31\nE OCON\nOCO\nocon\nAlpine\n0090FF\nalpine\nEsteban\nOcon\nEsteban Ocon\n...\nNaN\n13.0\n13\n16.0\nNaN\nNaN\nNaN\nNaN\n+1 Lap\n0.0\n\n\n13\n63\nG RUSSELL\nRUS\nrussell\nWilliams\n005AFF\nwilliams\nGeorge\nRussell\nGeorge Russell\n...\nNaN\n14.0\n14\n15.0\nNaN\nNaN\nNaN\nNaN\n+1 Lap\n0.0\n\n\n14\n5\nS VETTEL\nVET\nvettel\nAston Martin\n006F62\naston_martin\nSebastian\nVettel\nSebastian Vettel\n...\nNaN\n15.0\n15\n20.0\nNaN\nNaN\nNaN\nNaN\n+1 Lap\n0.0\n\n\n15\n47\nM SCHUMACHER\nMSC\nmick_schumacher\nHaas F1 Team\nFFFFFF\nhaas\nMick\nSchumacher\nMick Schumacher\n...\nNaN\n16.0\n16\n18.0\nNaN\nNaN\nNaN\nNaN\n+1 Lap\n0.0\n\n\n16\n10\nP GASLY\nGAS\ngasly\nAlphaTauri\n2B4562\nalphatauri\nPierre\nGasly\nPierre Gasly\n...\nNaN\n17.0\n17\n5.0\nNaN\nNaN\nNaN\nNaN\nRetired\n0.0\n\n\n17\n6\nN LATIFI\nLAT\nlatifi\nWilliams\n005AFF\nwilliams\nNicholas\nLatifi\nNicholas Latifi\n...\nNaN\n18.0\n18\n17.0\nNaN\nNaN\nNaN\nNaN\nRetired\n0.0\n\n\n18\n14\nF ALONSO\nALO\nalonso\nAlpine\n0090FF\nalpine\nFernando\nAlonso\nFernando Alonso\n...\nNaN\n19.0\nR\n9.0\nNaN\nNaN\nNaN\nNaN\nBrakes\n0.0\n\n\n19\n9\nN MAZEPIN\nMAZ\nmazepin\nHaas F1 Team\nFFFFFF\nhaas\nNikita\nMazepin\nNikita Mazepin\n...\nNaN\n20.0\nR\n19.0\nNaN\nNaN\nNaN\nNaN\nAccident\n0.0\n\n\n\n\n20 rows × 21 columns\n\n\n\nYou can see that the data is returned in a pandas DataFrame. This makes it easy to work with the data and analyze it further. You also have to do the same for the other sessions, like Qualifying “Q” and Practice “P”.\n\n\nDrivers Results\nThis is actually a continuation of the previous section. We use the same session to get all the drivers’ laps data for that session.\ndrivers_results = session.laps.pick_drivers(\"VER\")\ndrivers_results\nYou can actually get the data for all the drivers by passing the driver’s name to the pick_drivers method.\ndrivers_results = session.laps.pick_drivers(['VER', 'HAM'])\ndrivers_results\n\ndrivers_results = pd.read_csv(\"data/drivers_results.csv\")\ndrivers_results\n\n\n\n\n\n\n\n\nTime\nDriver\nDriverNumber\nLapTime\nLapNumber\nStint\nPitOutTime\nPitInTime\nSector1Time\nSector2Time\n...\nFreshTyre\nTeam\nLapStartTime\nLapStartDate\nTrackStatus\nPosition\nDeleted\nDeletedReason\nFastF1Generated\nIsAccurate\n\n\n\n\n0\n0 days 00:39:08.419000\nVER\n33\n0 days 00:01:58.245000\n1.0\n1.0\nNaN\nNaN\nNaN\n0 days 00:00:53.703000\n...\nFalse\nRed Bull Racing\n0 days 00:37:09.970000\n2021-03-28 15:07:09.980\n124\n2.0\nFalse\nNaN\nFalse\nFalse\n\n\n1\n0 days 00:41:30.825000\nVER\n33\n0 days 00:02:22.406000\n2.0\n1.0\nNaN\nNaN\n0 days 00:00:45.874000\n0 days 00:01:01.922000\n...\nFalse\nRed Bull Racing\n0 days 00:39:08.419000\n2021-03-28 15:09:08.429\n4\n1.0\nFalse\nNaN\nFalse\nFalse\n\n\n2\n0 days 00:44:08.804000\nVER\n33\nNaN\n3.0\n1.0\nNaN\nNaN\n0 days 00:00:44.111000\n0 days 00:01:02.264000\n...\nFalse\nRed Bull Racing\n0 days 00:41:30.825000\n2021-03-28 15:11:30.835\n41\n1.0\nFalse\nNaN\nFalse\nFalse\n\n\n3\n0 days 00:45:53.147000\nVER\n33\n0 days 00:01:44.343000\n4.0\n1.0\nNaN\nNaN\n0 days 00:00:32.129000\n0 days 00:00:41.273000\n...\nFalse\nRed Bull Racing\n0 days 00:44:08.804000\n2021-03-28 15:14:08.814\n126\n1.0\nFalse\nNaN\nFalse\nFalse\n\n\n4\n0 days 00:47:37.776000\nVER\n33\n0 days 00:01:44.629000\n5.0\n1.0\nNaN\nNaN\n0 days 00:00:39.328000\n0 days 00:00:41.460000\n...\nFalse\nRed Bull Racing\n0 days 00:45:53.147000\n2021-03-28 15:15:53.157\n671\n1.0\nFalse\nNaN\nFalse\nFalse\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n108\n0 days 02:04:29.635000\nHAM\n44\n0 days 00:01:36.155000\n53.0\n3.0\nNaN\nNaN\n0 days 00:00:30.810000\n0 days 00:00:41.885000\n...\nTrue\nMercedes\n0 days 02:02:53.480000\n2021-03-28 16:32:53.490\n1\n1.0\nFalse\nNaN\nFalse\nTrue\n\n\n109\n0 days 02:06:04.449000\nHAM\n44\n0 days 00:01:34.814000\n54.0\n3.0\nNaN\nNaN\n0 days 00:00:30.734000\n0 days 00:00:40.788000\n...\nTrue\nMercedes\n0 days 02:04:29.635000\n2021-03-28 16:34:29.645\n1\n1.0\nFalse\nNaN\nFalse\nTrue\n\n\n110\n0 days 02:07:39.155000\nHAM\n44\n0 days 00:01:34.706000\n55.0\n3.0\nNaN\nNaN\n0 days 00:00:30.605000\n0 days 00:00:40.960000\n...\nTrue\nMercedes\n0 days 02:06:04.449000\n2021-03-28 16:36:04.459\n1\n1.0\nFalse\nNaN\nFalse\nTrue\n\n\n111\n0 days 02:09:14.073000\nHAM\n44\n0 days 00:01:34.918000\n56.0\n3.0\nNaN\nNaN\n0 days 00:00:30.431000\n0 days 00:00:40.946000\n...\nTrue\nMercedes\n0 days 02:07:39.155000\n2021-03-28 16:37:39.165\n1\n1.0\nFalse\nNaN\nFalse\nTrue\n\n\n112\n0 days 02:11:59.252000\nHAM\n44\nNaN\n57.0\n3.0\nNaN\nNaN\nNaN\nNaN\n...\nTrue\nMercedes\n0 days 02:09:14.073000\nNaN\n1\nNaN\nFalse\nNaN\nTrue\nFalse\n\n\n\n\n113 rows × 31 columns\n\n\n\n\n\nPutting it all together\nNow that we have all the data we need, we can put it all together to get a complete view of the 2021 F1 season.\nThis code only gets the final results of each driver through the season, but you can get more data by changing the session type to “Q” or “P” and passing the driver’s name to the pick_drivers method.\n\nresults = []\n\nraces = ergast.get_race_schedule(2021)\n\nfor rnd, race in races[\"raceName\"].items():\n    \n    session = fastf1.get_session(2021, race, \"R\")\n    session.load()\n    \n    session_results = session.results\n    session_results[\"round\"] = rnd + 1\n    session_results[\"race\"] = race.removesuffix(\" Grand Prix\")\n    session_results[\"sprint\"] = \"False\"\n    session_results[\"season\"] = 2021\n    results.append(session_results)\n        \n\nall_results = pd.concat(results)\nall_results\nNOTE: The code above will take a while to run because it is pulling a lot of data from the API. It took me about 17 minutes to run on my machine.\n\nall_results = pd.read_csv(\"data/all_results.csv\")\nall_results\n\n\n\n\n\n\n\n\nDriverNumber\nBroadcastName\nAbbreviation\nDriverId\nTeamName\nTeamColor\nTeamId\nFirstName\nLastName\nFullName\n...\nQ1\nQ2\nQ3\nTime\nStatus\nPoints\nround\nrace\nsprint\nseason\n\n\n\n\n0\n44\nL HAMILTON\nHAM\nhamilton\nMercedes\n00D2BE\nmercedes\nLewis\nHamilton\nLewis Hamilton\n...\nNaN\nNaN\nNaN\n0 days 01:32:03.897000\nFinished\n25.0\n1\nBahrain\nFalse\n2021\n\n\n1\n33\nM VERSTAPPEN\nVER\nmax_verstappen\nRed Bull Racing\n0600EF\nred_bull\nMax\nVerstappen\nMax Verstappen\n...\nNaN\nNaN\nNaN\n0 days 00:00:00.745000\nFinished\n18.0\n1\nBahrain\nFalse\n2021\n\n\n2\n77\nV BOTTAS\nBOT\nbottas\nMercedes\n00D2BE\nmercedes\nValtteri\nBottas\nValtteri Bottas\n...\nNaN\nNaN\nNaN\n0 days 00:00:37.383000\nFinished\n16.0\n1\nBahrain\nFalse\n2021\n\n\n3\n4\nL NORRIS\nNOR\nnorris\nMcLaren\nFF9800\nmclaren\nLando\nNorris\nLando Norris\n...\nNaN\nNaN\nNaN\n0 days 00:00:46.466000\nFinished\n12.0\n1\nBahrain\nFalse\n2021\n\n\n4\n11\nS PEREZ\nPER\nperez\nRed Bull Racing\n0600EF\nred_bull\nSergio\nPerez\nSergio Perez\n...\nNaN\nNaN\nNaN\n0 days 00:00:52.047000\nFinished\n10.0\n1\nBahrain\nFalse\n2021\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n435\n6\nN LATIFI\nLAT\nlatifi\nWilliams\n005AFF\nwilliams\nNicholas\nLatifi\nNicholas Latifi\n...\nNaN\nNaN\nNaN\nNaN\nAccident\n0.0\n22\nAbu Dhabi\nFalse\n2021\n\n\n436\n99\nA GIOVINAZZI\nGIO\ngiovinazzi\nAlfa Romeo Racing\n900000\nalfa\nAntonio\nGiovinazzi\nAntonio Giovinazzi\n...\nNaN\nNaN\nNaN\nNaN\nGearbox\n0.0\n22\nAbu Dhabi\nFalse\n2021\n\n\n437\n63\nG RUSSELL\nRUS\nrussell\nWilliams\n005AFF\nwilliams\nGeorge\nRussell\nGeorge Russell\n...\nNaN\nNaN\nNaN\nNaN\nGearbox\n0.0\n22\nAbu Dhabi\nFalse\n2021\n\n\n438\n7\nK RAIKKONEN\nRAI\nraikkonen\nAlfa Romeo Racing\n900000\nalfa\nKimi\nRäikkönen\nKimi Räikkönen\n...\nNaN\nNaN\nNaN\nNaN\nBrakes\n0.0\n22\nAbu Dhabi\nFalse\n2021\n\n\n439\n9\nNaN\nMAZ\nmazepin\nHaas F1 Team\nNaN\nhaas\nNikita\nMazepin\nNikita Mazepin\n...\nNaN\nNaN\nNaN\nNaN\nIllness\n0.0\n22\nAbu Dhabi\nFalse\n2021\n\n\n\n\n440 rows × 25 columns"
  },
  {
    "objectID": "posts/Public/random_column/random_gens.html",
    "href": "posts/Public/random_column/random_gens.html",
    "title": "Random Column",
    "section": "",
    "text": "If you need to fill a column with a random value, here’s how you do it\nimport numpy as np\nimport pandas as pd\nimport random\n\nrandom.seed(42)\n\ndata = {\n    \"column1\": [\"A\", \"B\", \"C\", \"D\", \"E\"] * 100,\n}\n\ndf = pd.DataFrame(data)\nThere’s 100 of each value in column1."
  },
  {
    "objectID": "posts/Public/random_column/random_gens.html#level-1-list",
    "href": "posts/Public/random_column/random_gens.html#level-1-list",
    "title": "Random Column",
    "section": "Level 1: List",
    "text": "Level 1: List\nLet’s start with this simple scenario. You have one column with a value, and you want to fill another column with a random value from a list.\n\ndf[\"random\"] = df[\"column1\"].apply(\n    lambda x: random.choice([\"Apple\", \"Banana\", \"Carrot\", \"Dog\", \"Elephant\"])\n)\n\n\ndf[\"random\"].value_counts()\n\nrandom\nApple       107\nBanana      106\nElephant    101\nCarrot       98\nDog          88\nName: count, dtype: int64"
  },
  {
    "objectID": "posts/Public/random_column/random_gens.html#level-2-dictionary",
    "href": "posts/Public/random_column/random_gens.html#level-2-dictionary",
    "title": "Random Column",
    "section": "Level 2: Dictionary",
    "text": "Level 2: Dictionary\nNow let’s say you want the two columns to speak to each other. You want to fill column2 with a random value based on the value in column1.\n\ndf_dict = {\n    \"A\": [\"Apple\", \"Ant\", \"Aardvark\"],\n    \"B\": [\"Banana\", \"Bee\", \"Bear\"],\n    \"C\": [\"Carrot\", \"Cat\", \"Cheetah\"],\n    \"D\": [\"Dog\", \"Dolphin\", \"Duck\"],\n    \"E\": [\"Elephant\", \"Eagle\", \"Eel\"],\n}\n\ndf[\"random_dict\"] = df[\"column1\"].apply(lambda x: random.choice(df_dict[x]))\n\n\ndf.groupby(\"column1\")[\"random_dict\"].value_counts()\n\ncolumn1  random_dict\nA        Aardvark       38\n         Ant            35\n         Apple          27\nB        Bee            35\n         Bear           34\n         Banana         31\nC        Cheetah        37\n         Carrot         33\n         Cat            30\nD        Dolphin        43\n         Dog            32\n         Duck           25\nE        Elephant       36\n         Eagle          32\n         Eel            32\nName: count, dtype: int64"
  },
  {
    "objectID": "posts/Public/random_column/random_gens.html#level-3-weights",
    "href": "posts/Public/random_column/random_gens.html#level-3-weights",
    "title": "Random Column",
    "section": "Level 3: Weights",
    "text": "Level 3: Weights\nNow let’s say you want to fill column2 with a random value, but you want to control the ratio of the random values.\nThe weights need to add up to 1.\n\ndf[\"random_weights\"] = df[\"column1\"].apply(\n    lambda x: random.choices(\n        [\"Apple\", \"Banana\", \"Carrot\", \"Dog\", \"Elephant\"],\n        weights=[0.4, 0.3, 0.1, 0.1, 0.1],\n    )[0]\n)\n\n\ndf[\"random_weights\"].value_counts()\n\nrandom_weights\nApple       203\nBanana      156\nElephant     53\nCarrot       47\nDog          41\nName: count, dtype: int64"
  },
  {
    "objectID": "posts/Public/random_column/random_gens.html#level-4-custom-weights",
    "href": "posts/Public/random_column/random_gens.html#level-4-custom-weights",
    "title": "Random Column",
    "section": "Level 4: Custom Weights",
    "text": "Level 4: Custom Weights\nBut what if you want to control the ratio of the random values on a per-condition basis?\n\ndf_dict = {\n    \"A\": {\"values\": [\"Apple\", \"Ant\", \"Aardvark\"], \"weights\": [0.7, 0.2, 0.1]},\n    \"B\": {\"values\": [\"Banana\", \"Bee\", \"Bear\"], \"weights\": [0.6, 0.3, 0.1]},\n    \"C\": {\"values\": [\"Carrot\", \"Cat\", \"Cheetah\"], \"weights\": [0.5, 0.3, 0.2]},\n    \"D\": {\"values\": [\"Dog\", \"Dolphin\", \"Duck\"], \"weights\": [0.6, 0.2, 0.2]},\n    \"E\": {\"values\": [\"Elephant\", \"Eagle\", \"Eel\"], \"weights\": [0.8, 0.1, 0.1]},\n}\n\ndf[\"random_custom_weights\"] = df[\"column1\"].apply(\n    lambda x: random.choices(df_dict[x][\"values\"], weights=df_dict[x][\"weights\"])[0]\n)\n\ndf.groupby(\"column1\")[\"random_custom_weights\"].value_counts()\n\ncolumn1  random_custom_weights\nA        Apple                    71\n         Ant                      17\n         Aardvark                 12\nB        Banana                   66\n         Bee                      20\n         Bear                     14\nC        Carrot                   51\n         Cat                      25\n         Cheetah                  24\nD        Dog                      63\n         Dolphin                  25\n         Duck                     12\nE        Elephant                 81\n         Eel                      11\n         Eagle                     8\nName: count, dtype: int64"
  },
  {
    "objectID": "posts/Public/random_column/random_gens.html#reverse-engineering-weights",
    "href": "posts/Public/random_column/random_gens.html#reverse-engineering-weights",
    "title": "Random Column",
    "section": "Reverse Engineering Weights",
    "text": "Reverse Engineering Weights\nLet’s reverse engineer the weights for the random_weights column.\n\nnew_weights = df[\"random_weights\"].value_counts().reset_index()\n\nnew_weights[\"weight\"] = (new_weights[\"count\"] / new_weights[\"count\"].sum()).round(1)\n\nvalues = new_weights[\"random_weights\"].tolist()\nweights = new_weights[\"weight\"].tolist()\n\nprint(values)\nprint(weights)\n\n['Apple', 'Banana', 'Elephant', 'Carrot', 'Dog']\n[0.4, 0.3, 0.1, 0.1, 0.1]"
  },
  {
    "objectID": "posts/Public/random_column/random_gens.html#reverse-engineering-custom-weights",
    "href": "posts/Public/random_column/random_gens.html#reverse-engineering-custom-weights",
    "title": "Random Column",
    "section": "Reverse Engineering Custom Weights",
    "text": "Reverse Engineering Custom Weights\nLet’s reverse engineer the weights for the random_custom_weights column.\n\nnew_weights = (\n    df.groupby(\"column1\")[\"random_custom_weights\"].value_counts()\n    # .unstack()\n    .reset_index()\n)\n\nnew_weights[\"sum\"] = new_weights.groupby(\"column1\")[\"count\"].transform(\"sum\")\nnew_weights[\"weight\"] = (new_weights[\"count\"] / new_weights[\"sum\"]).round(1)\nnew_weights.drop(columns=[\"sum\"], inplace=True)\n\n\nnew_dict = (\n    new_weights.groupby(\"column1\")[[\"random_custom_weights\", \"weight\"]]\n    .apply(lambda x: x.to_dict(orient=\"records\"))\n    .to_dict()\n)\n\n\nnew_df_dict = {}\n\nfor key, value in new_dict.items():\n    values = []\n    weights = []\n\n    for item in value:\n        values.append(item[\"random_custom_weights\"])\n        weights.append(item[\"weight\"])\n\n    new_df_dict[key] = {\"values\": values, \"weights\": weights}\n\nnew_df_dict\n\n{'A': {'values': ['Apple', 'Ant', 'Aardvark'], 'weights': [0.7, 0.2, 0.1]},\n 'B': {'values': ['Banana', 'Bee', 'Bear'], 'weights': [0.7, 0.2, 0.1]},\n 'C': {'values': ['Carrot', 'Cat', 'Cheetah'], 'weights': [0.5, 0.2, 0.2]},\n 'D': {'values': ['Dog', 'Dolphin', 'Duck'], 'weights': [0.6, 0.2, 0.1]},\n 'E': {'values': ['Elephant', 'Eel', 'Eagle'], 'weights': [0.8, 0.1, 0.1]}}\n\n\nUsing this new dictionary, we can generate results that match the origional distribution.\n\ndf[\"random_reversed_weights\"] = df[\"column1\"].apply(\n    lambda x: random.choices(\n        new_df_dict[x][\"values\"], weights=new_df_dict[x][\"weights\"]\n    )[0]\n)\n\ndf.groupby(\"column1\")[\"random_reversed_weights\"].value_counts()\n\ncolumn1  random_reversed_weights\nA        Apple                      67\n         Ant                        25\n         Aardvark                    8\nB        Banana                     68\n         Bee                        18\n         Bear                       14\nC        Carrot                     64\n         Cat                        22\n         Cheetah                    14\nD        Dog                        62\n         Dolphin                    21\n         Duck                       17\nE        Elephant                   79\n         Eagle                      11\n         Eel                        10\nName: count, dtype: int64"
  }
]